<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Simplation&#39;s Blogs</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-14T07:35:50.702Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Simplation</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Gradle Kotlin DSL.md</title>
    <link href="http://yoursite.com/2020/08/14/Gradle%20Kotlin%20DSL/"/>
    <id>http://yoursite.com/2020/08/14/Gradle Kotlin DSL/</id>
    <published>2020-08-14T07:32:15.000Z</published>
    <updated>2020-08-14T07:35:50.702Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gradle-Kotlin-DSL"><a href="#Gradle-Kotlin-DSL" class="headerlink" title="Gradle Kotlin DSL"></a>Gradle Kotlin DSL</h1><h2 id="一、什么是-DSL？"><a href="#一、什么是-DSL？" class="headerlink" title="一、什么是 DSL？"></a>一、什么是 DSL？</h2><p>DSL（domain specific language），即领域专用语言：专门解决某一特定问题的计算机语言，比如大家耳熟能详的 SQL 和正则表达式。</p><h2 id="二、Gradle-的-Kotlin-DSL-使用要求和优缺点"><a href="#二、Gradle-的-Kotlin-DSL-使用要求和优缺点" class="headerlink" title="二、Gradle 的 Kotlin DSL 使用要求和优缺点"></a>二、Gradle 的 Kotlin DSL 使用要求和优缺点</h2><p>Gradle 的 Kotlin DSL 提供了传统 Groovy DSL 的替代语法，并在受支持的 IDE 中提供了增强的编辑体验，并具有出色的内容辅助，重构，文档等功能。</p><ol><li>使用要求<ul><li>尽可能的保证 Gradle 和 Android 版本为最新版本</li><li>JDK 版本至少是 8 或者以上</li></ul></li><li>优点<ul><li>Kotlin 是 Android 官方推荐语言，使用 Kotlin 构建 Gradle 脚本有利于整个项目开发语言的统一。</li><li>Kotlin DSL 支持跳转到源码。</li><li>Kotlin DSL 在编译时检查错误。</li><li>Kotlin DSL 支持代码自动补全和语法高亮。</li></ul></li><li>缺点<ul><li>编译速度有所欠缺。</li></ul></li></ol><h2 id="三、从-Groovy-迁移到-Kotlin-DSL-的步骤"><a href="#三、从-Groovy-迁移到-Kotlin-DSL-的步骤" class="headerlink" title="三、从 Groovy 迁移到 Kotlin DSL 的步骤"></a>三、从 Groovy 迁移到 Kotlin DSL 的步骤</h2><ol><li><p>语法的区分</p><ul><li>Groovy 字符串可以用单引号 <code>&#39;string&#39;</code> 或双引号引起来 <code>&quot;string&quot;</code>，而 Kotlin 需要双引号 <code>&quot;string&quot;</code>。</li><li>Groovy 允许在调用函数时省略括号，而 Kotlin 始终需要括号。</li><li>Gradle Groovy DSL 允许 <code>=</code> 在分配属性时省略赋值运算符，而 Kotlin 始终需要赋值运算符。</li></ul></li><li><p>需要改造的文件</p><ul><li>settings.gradle</li><li>project 目录下的 <code>build.gradle</code></li><li>app 目录下的 build.gradle</li></ul></li><li><p>步骤(按照上述罗列的顺序依次进行)</p><ul><li><p>settings.gradle (<strong>Gradle Groovy DSL 允许 <code>=</code> 在分配属性时省略赋值运算符，而 Kotlin 始终需要赋值运算符。</strong>)</p><p>修改文件名称为 <code>settings.gradle.kts</code>，将原来的代码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include <span class="string">':app'</span></span><br><span class="line">rootProject.name = <span class="string">"ProjectName"</span></span><br></pre></td></tr></table></figure><p>替换为以下代码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include(<span class="string">":app"</span>)</span><br><span class="line">rootProject.name = <span class="string">"ProjectName"</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li><p>project / build.gradle</p><p>同样，第一步是修改文件名称，把<code>build.gradle</code> 重命名为 <code>build.gradle.kts</code>，先罗列出原来的代码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    <span class="keyword">val</span> kotlin_version = <span class="string">"1.3.61"</span> <span class="comment">// #1</span></span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath(<span class="string">"com.android.tools.build:gradle:4.0.0-beta01"</span>)  <span class="comment">// #2</span></span><br><span class="line">        classpath(<span class="string">"org.jetbrains.kotlin:kotlin-gradle-plugin:<span class="variable">$kotlin_version</span>"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasks.register(<span class="string">"clean"</span>, Delete::<span class="class"><span class="keyword">class</span>) </span>&#123;  <span class="comment">// #3</span></span><br><span class="line">    delete(rootProject.buildDir)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><pre><code>将上面代码标注的三个地方替换成以下代码<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line"><span class="keyword">val</span> kotlinVersion = <span class="string">"1.3.72"</span></span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath(<span class="string">"com.android.tools.build:gradle:4.0.0"</span>)</span><br><span class="line">        classpath(kotlin(<span class="string">"gradle-plugin"</span>, kotlinVersion))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line"></span><br><span class="line">        maven &#123;</span><br><span class="line">            setUrl(<span class="string">"https://jitpack.io"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasks &#123;</span><br><span class="line">    <span class="keyword">val</span> clean <span class="keyword">by</span> registering(Delete::<span class="class"><span class="keyword">class</span>) </span>&#123;</span><br><span class="line">        delete(buildDir)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>app / build.gradle</p><p>同样，先修改名称，将 <code>build.gradle</code>重命名为 <code>build.gardle.kts</code>，该文件修改的较多，直接展示已完成的代码，然后点击 Sync now，同步构建以下代码。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;  <span class="comment">// #1</span></span><br><span class="line">    id(<span class="string">"com.android.application"</span>)</span><br><span class="line">    kotlin(<span class="string">"android"</span>)</span><br><span class="line">    kotlin(<span class="string">"android.extensions"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion(<span class="number">29</span>)  <span class="comment">// #2</span></span><br><span class="line">    buildToolsVersion(<span class="string">"29.0.3"</span>)</span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId = <span class="string">"com.example.projectname"</span></span><br><span class="line">        minSdkVersion(<span class="number">21</span>)</span><br><span class="line">        targetSdkVersion(<span class="number">29</span>)</span><br><span class="line">        versionCode = <span class="number">1</span></span><br><span class="line">        versionName = <span class="string">"1.0"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        getByName(<span class="string">"release"</span>) &#123;   <span class="comment">// #3</span></span><br><span class="line">            isMinifyEnabled = <span class="literal">false</span></span><br><span class="line">            proguardFiles (getDefaultProguardFile(<span class="string">"proguard-android-optimize.txt"</span>), <span class="string">"proguard-rules.pro"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation(</span><br><span class="line">        fileTree(  <span class="comment">// #4</span></span><br><span class="line">            mapOf(<span class="string">"dir"</span> to <span class="string">"libs"</span>, <span class="string">"include"</span> to listOf(<span class="string">"*.jar"</span>))</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    implementation (kotlin(</span><br><span class="line">        <span class="string">"stdlib-jdk7"</span>,</span><br><span class="line">        org.jetbrains.kotlin.config.KotlinCompilerVersion.VERSION</span><br><span class="line">    ))</span><br><span class="line">    implementation(<span class="string">"androidx.core:core-ktx:1.2.0"</span>)</span><br><span class="line">    implementation(<span class="string">"androidx.appcompat:appcompat:1.1.0"</span>)</span><br><span class="line">    implementation(<span class="string">"androidx.constraintlayout:constraintlayout:1.1.3"</span>)</span><br><span class="line">    testImplementation(<span class="string">"junit:junit:4.12"</span>)</span><br><span class="line">    androidTestImplementation(<span class="string">"androidx.test.ext:junit:1.1.1"</span>)</span><br><span class="line">    androidTestImplementation(<span class="string">"androidx.test.espresso:espresso-core:3.2.0"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到以上代码，不知你是否存在这样的想法？（所有的版本号、依赖库等直接写在 build.gradle.kts 文件中，能不能有一个文件统一进行管理呢？?）答案当然是可以的（官方提供的解决方案：<strong>buildSrc</strong>），<strong>最后再简单说一下 buildSrc 这个文件夹的作用：管理整个项目的依赖。</strong></p></li></ul><h2 id="四、创建-buildSrc"><a href="#四、创建-buildSrc" class="headerlink" title="四、创建 buildSrc"></a>四、创建 buildSrc</h2><ol><li><p>在项目的根目录下创建 buildSrc 文件夹，然后分别创建 src/main/kotlin 和 build.gradle.kts 文件就可以。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">buildSrc</span><br><span class="line">├── build.gradle.kts</span><br><span class="line">└── src</span><br><span class="line">    └── main</span><br><span class="line">        └── kotlin</span><br><span class="line">           └── AndroidConfig</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>在 src/main/kotlin 目录下创建 AndroidConfig 文件，分别将版本信息罗列出来。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> AndroidConfig &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">val</span> compileSdkVersion = <span class="number">29</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">val</span> buildToolsVersion = <span class="string">"29.0.3"</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">val</span> minSdkVersion = <span class="number">21</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">val</span> targetSdkVersion = <span class="number">29</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">val</span> versionCode = <span class="number">1</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">val</span> versionName = <span class="string">"1.0.0"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">val</span> applicationID = <span class="string">"com.example.projectname"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">val</span> testInstrumentationRunner = <span class="string">"androidx.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">BuildType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">val</span> Release = <span class="string">"release"</span></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">val</span> Debug = <span class="string">"debug"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> isMinifyEnabled: <span class="built_in">Boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span> BuildTypeDebug : BuildType &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> isMinifyEnabled = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span> BuildTypeRelease : BuildType &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> isMinifyEnabled = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span> TestOptions &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">val</span> isReturnDefaultValues = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>最后在 app/build.gradle.kts 文件中引用即可。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id(<span class="string">"com.android.application"</span>)</span><br><span class="line">    kotlin(<span class="string">"android"</span>)</span><br><span class="line">    kotlin(<span class="string">"android.extensions"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion(AndroidConfig.compileSdkVersion)</span><br><span class="line">    buildToolsVersion(AndroidConfig.buildToolsVersion)</span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId = AndroidConfig.applicationID</span><br><span class="line"></span><br><span class="line">        minSdkVersion(AndroidConfig.minSdkVersion)</span><br><span class="line">        targetSdkVersion(AndroidConfig.targetSdkVersion)</span><br><span class="line">        versionCode = AndroidConfig.versionCode</span><br><span class="line">        versionName = AndroidConfig.versionName</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation(fileTree(mapOf(<span class="string">"dir"</span> to <span class="string">"libs"</span>, <span class="string">"include"</span> to listOf(<span class="string">"*.jar"</span>, <span class="string">"*.aar"</span>))))  <span class="comment">// ## 重点</span></span><br><span class="line">    implementation(LibraryDependency.KOTLIN)</span><br><span class="line">    implementation(LibraryDependency.COREKTX)</span><br><span class="line">    testImplementation(LibraryDependency.JUNIT)</span><br><span class="line">    androidTestImplementation(LibraryDependency.EXTJUNIT)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>   注：贴出的代码不完整，简单贴一下。</p><ol start="4"><li><p>完善一下 buildSrc 下的 build.gradle.kts 文件</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    `kotlin-dsl`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="五、参考"><a href="#五、参考" class="headerlink" title="五、参考"></a>五、参考</h2><p><a href="http://s0docs0gradle0org.icopy.site/current/userguide/kotlin_dsl.html" target="_blank" rel="noopener">Gradle 官方文档</a></p><p><a href="https://www.imooc.com/article/308520" target="_blank" rel="noopener">Gradle Kotlin DSL , 你知道它吗？</a></p><p><a href="https://docs.gradle.org/current/userguide/organizing_gradle_projects.html#sec:build_sources" target="_blank" rel="noopener">buildSrc</a></p><p>//  <a href="https://github.com/igorwojda/android-showcase" target="_blank" rel="noopener">Github DSL showCase</a>  示例 不公开。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Gradle-Kotlin-DSL&quot;&gt;&lt;a href=&quot;#Gradle-Kotlin-DSL&quot; class=&quot;headerlink&quot; title=&quot;Gradle Kotlin DSL&quot;&gt;&lt;/a&gt;Gradle Kotlin DSL&lt;/h1&gt;&lt;h2 id=&quot;一、什么是
      
    
    </summary>
    
      <category term="Kotlin" scheme="http://yoursite.com/categories/Kotlin/"/>
    
      <category term="Gradle" scheme="http://yoursite.com/categories/Kotlin/Gradle/"/>
    
      <category term="DSL" scheme="http://yoursite.com/categories/Kotlin/Gradle/DSL/"/>
    
    
      <category term="Kotlin" scheme="http://yoursite.com/tags/Kotlin/"/>
    
      <category term="Gradle" scheme="http://yoursite.com/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>ImageView 的 scaleType 属性.md</title>
    <link href="http://yoursite.com/2020/05/27/ImageView%20%E7%9A%84%20scaleType%20%E5%B1%9E%E6%80%A7/"/>
    <id>http://yoursite.com/2020/05/27/ImageView 的 scaleType 属性/</id>
    <published>2020-05-27T14:17:23.000Z</published>
    <updated>2020-07-28T14:20:31.833Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ImageView-的-scaleType-属性"><a href="#ImageView-的-scaleType-属性" class="headerlink" title="ImageView 的 scaleType 属性"></a>ImageView 的 scaleType 属性</h1><p>Android 官方给 ImageView 提供了八种<code>scaleType</code>的属性值，每种都对应了一种展示方式。</p><p>八个<code>ScaleType</code>，其实可以分为三个类型：</p><ol><li>以<code>FIT_</code>开头的 4 种，它们的共同点是都会对图片进行缩放；</li><li>以<code>CENTER_</code>开头的 3 种，它们的共同点是居中显示，图片的中心点会与<code>ImageView</code>的中心点重叠；</li><li><code>ScaleType.MATRIX</code></li></ol><h2 id="FIT"><a href="#FIT" class="headerlink" title="FIT_"></a>FIT_</h2><ul><li><p>ScaleType.FIT_CENTER：默认值，图片会被等比缩放到控件上并居中显示。</p></li><li><p>ScaleType.FIT_START：图片等比缩放到控件大小，并放置在控件的左上角展示。</p></li><li><p>ScaleType.FIT_END：图片等比缩放到控件大小，并放置在控件的右下角展示。</p></li><li><p>ScaleType.FIT_XY：图片缩放到控件大小，并完全填充控件大小展示。<strong>[ 非等比例缩放 ]</strong></p></li></ul><h2 id="CENTER"><a href="#CENTER" class="headerlink" title="CENTER_"></a>CENTER_</h2><ul><li>ScaleType.CENTER：不使用缩放，图片和 <code>ImageView</code>的中心会重合，并根据 <code>ImageView</code>的大小显示图片</li><li>ScaleType.CENTER_CROP：图片会被等比缩放直到完全填充整个<code>ImageView</code>，并居中显示。</li><li>ScaleType.CENTER_INSIDE：此模式的目的是完全展示图片内同为目的，图片将被等比缩放到能够完整展示在<code>ImageView</code>中并居中</li></ul><h2 id="MATRIX"><a href="#MATRIX" class="headerlink" title="MATRIX"></a>MATRIX</h2><ul><li><p>ScaleType.MATRIX：该模式需要与<code>ImageView.setImageMatrix (Matrix matrix)</code> 配合使用，因为该模式需要用于指定一个变换矩阵用于指定图片如何展示。</p></li><li><p>示例（注意步骤）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">imageView.setScaleType(ImageView.ScaleType.MATRIX);</span><br><span class="line">imageView.setScaleType(ImageView.ScaleType.MATRIX);  <span class="comment">// 设置为矩阵模式</span></span><br><span class="line"></span><br><span class="line">Matrix matrix = <span class="keyword">new</span> Matrix();           <span class="comment">// 创建一个单位矩阵</span></span><br><span class="line">matrix.setTranslate(<span class="number">100</span>, <span class="number">100</span>);          <span class="comment">// 平移 x 和y各 100 单位</span></span><br><span class="line">matrix.preRotate(<span class="number">30</span>);                   <span class="comment">// 顺时针旋转30度</span></span><br><span class="line">imageView.setImageMatrix(matrix);       <span class="comment">// 设置并应用矩阵</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ImageView-的-scaleType-属性&quot;&gt;&lt;a href=&quot;#ImageView-的-scaleType-属性&quot; class=&quot;headerlink&quot; title=&quot;ImageView 的 scaleType 属性&quot;&gt;&lt;/a&gt;ImageView 的 sc
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="ImageView" scheme="http://yoursite.com/tags/ImageView/"/>
    
  </entry>
  
  <entry>
    <title>Chrome 常用扩展</title>
    <link href="http://yoursite.com/2020/04/02/Chrome%20%E5%B8%B8%E7%94%A8%E6%89%A9%E5%B1%95/"/>
    <id>http://yoursite.com/2020/04/02/Chrome 常用扩展/</id>
    <published>2020-04-02T13:22:17.000Z</published>
    <updated>2020-04-02T13:42:37.944Z</updated>
    
    <content type="html"><![CDATA[<p>正所谓：“工欲善其事必先利其器”，Chrome 扩展整理，你的 Chrome 有了这些扩展，绝对是如虎添翼。</p><ul><li>办公工具类</li><li>开发工具类</li><li>社交工具类</li><li>转换工具类</li></ul><h5 id="办公工具类"><a href="#办公工具类" class="headerlink" title="办公工具类"></a>办公工具类</h5><table><thead><tr><th>名称</th><th>说明</th><th>🔗</th></tr></thead><tbody><tr><td>Infinity 新标签页(Pro)</td><td><em>一款标签页扩展，可以自定义浏览器新标签页，可以根据自己需求定制。</em></td><td><a href="https://chrome.google.com/webstore/detail/infinity-new-tab-pro/nnnkddnnlpamobajfibfdgfnbcnkgngh?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/infinity-new-tab-pro/nnnkddnnlpamobajfibfdgfnbcnkgngh?hl=zh-CN</a></td></tr><tr><td>Momentum</td><td><em>一款可以美化 Chrome 启动页，将新标签页替换为具有待办事项，天气和灵感的个人仪表板等</em></td><td><a href="https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca?hl=zh-CN</a></td></tr><tr><td>Evernote Web Clipper</td><td><em>它是有印象笔记 evernote 推出的一款剪藏扩展，可以一键收藏各类网页图文，并永久保存进 Evernote。同时，还能选择保存网页正文、隐藏广告、整个页面、网页截屏等，让你根据不同需求，选择保存内容。告别复制粘贴，高效收集资料。</em></td><td><a href="https://chrome.google.com/webstore/detail/evernote-web-clipper/pioclpoplcdbaefihamjohnefbikjilc?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/evernote-web-clipper/pioclpoplcdbaefihamjohnefbikjilc?hl=zh-CN</a></td></tr><tr><td>Adblock Plus</td><td><em>免费广告拦截程序，缺点就是比较吃内存（相对的）</em></td><td><a href="https://chrome.google.com/webstore/detail/adblock-plus-free-ad-bloc/cfhdojbkjhnklbpkdaibdccddilifddb?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/adblock-plus-free-ad-bloc/cfhdojbkjhnklbpkdaibdccddilifddb?hl=zh-CN</a></td></tr><tr><td>uBlock Origin</td><td><em>一款高效的网络请求过滤工具，占用极低的内存和  CPU。</em></td><td><a href="https://chrome.google.com/webstore/detail/ublock-origin/cjpalhdlnbpafiamejdnhcphjbkeiagm?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/ublock-origin/cjpalhdlnbpafiamejdnhcphjbkeiagm?hl=zh-CN</a></td></tr><tr><td>Google   翻译</td><td><em>一款由谷歌公司提供的网页划词翻译扩展.。</em></td><td><a href="https://chrome.google.com/webstore/detail/google-translate/aapbdbdomjkkjkaonfhkkikfgjllcleb?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/google-translate/aapbdbdomjkkjkaonfhkkikfgjllcleb?hl=zh-CN</a></td></tr><tr><td>达达划词翻译</td><td><em>一款划词翻译、生词本、吐司弹词、与扇贝同步的翻译扩展.。</em></td><td><a href="https://chrome.google.com/webstore/detail/达达划词翻译/cajhcjfcodjoalmhjekljnfkgjlkeajl?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/%E8%BE%BE%E8%BE%BE%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/cajhcjfcodjoalmhjekljnfkgjlkeajl?hl=zh-CN</a></td></tr><tr><td>LastPass</td><td><em>一款免费的密码管理工具，只需要记得 LastPass 的主密码，保存你所有的用户名和密码。</em></td><td><a href="https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd?hl=zh-CN</a></td></tr><tr><td>Dark Reader</td><td><em>一款暗黑色的阅读扩展.，适用于任何网站。关爱眼睛，就使用Dark Reader进行夜间和日间浏览</em></td><td><a href="https://chrome.google.com/webstore/detail/dark-reader/eimadpbcbfnmbkopoojfekhnkhdbieeh?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/dark-reader/eimadpbcbfnmbkopoojfekhnkhdbieeh?hl=zh-CN</a></td></tr><tr><td>简悦 - SimpRead</td><td><em>一款可以让你瞬间进入沉浸式阅读的  Chrome 扩展，类似 Safari 的阅读模式。 包含 聚焦模式和阅读模式两种。</em></td><td><a href="https://chrome.google.com/webstore/detail/simpread-reader-view/ijllcpnolfcooahcekpamkbidhejabll?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/simpread-reader-view/ijllcpnolfcooahcekpamkbidhejabll?hl=zh-CN</a></td></tr><tr><td>书签侧边栏</td><td><em>一款可以在浏览器视图区左侧添加固定式的, 管理所有书签的侧边栏的扩展.</em></td><td><a href="https://chrome.google.com/webstore/detail/bookmark-sidebar/jdbnofccmhefkmjbkkdkfiicjkgofkdh?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/bookmark-sidebar/jdbnofccmhefkmjbkkdkfiicjkgofkdh?hl=zh-CN</a></td></tr><tr><td>几枝</td><td><em>一款高颜值的新标签页面，会在你每次打开新标签页时展示一句经典古诗词，配合层叠涌动的波浪或气泡背景，婉约如江南山水，让你的 Chrome 与众不同。</em></td><td><a href="https://chrome.google.com/webstore/detail/几枝/hfohpokminpknagcgncibpacohagppjn?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/几枝/hfohpokminpknagcgncibpacohagppjn?hl=zh-CN</a></td></tr><tr><td>Web Clipper</td><td><em>一款可以将网页上的内容「剪辑」下来，并一键保存至数种云笔记服务。印象笔记剪藏等工具相比，Web Clipper 支持智能提取、手动框选及自由编辑选中区域，还允许你将网页转换为 Markdown 格式，满足多种需求。</em></td><td><a href="https://chrome.google.com/webstore/detail/web-clipper-nimbus/kiokdhlcmjagacmcgoikapbjmmhfchbi?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/web-clipper-nimbus/kiokdhlcmjagacmcgoikapbjmmhfchbi?hl=zh-CN</a></td></tr><tr><td>DownThemAll!</td><td><em>DownThemAll!是 Firefox 平台的老牌下载增强扩展，现已支持 Chrome</em></td><td><a href="https://chrome.google.com/webstore/detail/downthemall/nljkibfhlpcnanjgbnlnbjecgicbjkge?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/downthemall/nljkibfhlpcnanjgbnlnbjecgicbjkge?hl=zh-CN</a></td></tr><tr><td>Online Download Manager</td><td><em>管理下载，搜索和保存视频、图像、mp3文件。</em></td><td><a href="https://chrome.google.com/webstore/detail/online-download-manager/opjjpmhoiojifppkkcdabiobhakljdgm?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/online-download-manager/opjjpmhoiojifppkkcdabiobhakljdgm?hl=zh-CN</a></td></tr><tr><td>New Tab Startup Quotes</td><td><em>每打开一个标签页，它都会显示一位成功人士的格言。</em></td><td><a href="https://chrome.google.com/webstore/detail/new-tab-startup-quotes/bljnhgkajocmhlflgefahihojeajhjji?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/new-tab-startup-quotes/bljnhgkajocmhlflgefahihojeajhjji?hl=zh-CN</a></td></tr><tr><td>markdown here</td><td><em>一键转换 md，跨平台</em></td><td><a href="https://chrome.google.com/webstore/detail/markdown-here/elifhakcjgalahccnjkneoccemfahfoa?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/markdown-here/elifhakcjgalahccnjkneoccemfahfoa?hl=zh-CN</a></td></tr><tr><td>二维码(QR码)生成器</td><td><em>一款可以将文字、网页等信息生成二维码的插件</em></td><td><a href="https://chrome.google.com/webstore/detail/quick-qr-code-generator/afpbjjgbdimpioenaedcjgkaigggcdpp?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/quick-qr-code-generator/afpbjjgbdimpioenaedcjgkaigggcdpp?hl=zh-CN</a></td></tr><tr><td>关灯看视频</td><td><em>让周围页面变暗从而达到最好的视觉效果。</em></td><td><a href="https://chrome.google.com/webstore/detail/turn-off-the-lights/bfbmjmiodbnnpllbbbfblcplfjjepjdn?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/turn-off-the-lights/bfbmjmiodbnnpllbbbfblcplfjjepjdn?hl=zh-CN</a></td></tr><tr><td>Reader View</td><td><em>将网页转换成 Safari 阅读模式的样式，享受更舒服的阅读模式。</em></td><td><a href="https://chrome.google.com/webstore/detail/reader-view/ecabifbgmdmgdllomnfinbmaellmclnh?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/reader-view/ecabifbgmdmgdllomnfinbmaellmclnh?hl=zh-CN</a></td></tr><tr><td>FireShot 任意方式截取网页的截图插件</td><td><em>捕捉网页截图，编辑并将它们保存为PDF，JPEG，GIF，PNG或BMP；上传，打印，在Photoshop中打开，复制到剪贴板或电子邮件</em></td><td><a href="https://chrome.google.com/webstore/detail/take-webpage-screenshots/mcbpblocgmgfnpjjppndjkmgjaogfceg?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/take-webpage-screenshots/mcbpblocgmgfnpjjppndjkmgjaogfceg?hl=zh-CN</a></td></tr><tr><td>Cloudbleed Bookmark Checker</td><td><em>检测书签是否有死链</em></td><td><a href="https://chrome.google.com/webstore/search/CloudbleedBookmarkChecker?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/search/Cloudbleed%20Bookmark%20Checker?hl=zh-CN</a></td></tr><tr><td>Trackr</td><td><em>追踪你的上网习惯，记录你使用 Chrome 上网的习惯</em></td><td><a href="https://chrome.google.com/webstore/detail/trackr/pccehhnicffhgffhdfgainipddlopmie?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/trackr/pccehhnicffhgffhdfgainipddlopmie?hl=zh-CN</a></td></tr><tr><td>网页截图</td><td><em>该插件能满足截图所有的需求，截取可见网页，选择区域，整个网页，还有对截图的标记</em></td><td><a href="https://chrome.google.com/webstore/detail/screen-capture/ghihpjhpgdepnohngpgfcmcijmkggpaf?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/screen-capture/ghihpjhpgdepnohngpgfcmcijmkggpaf?hl=zh-CN</a></td></tr><tr><td>新浪微博图床</td><td><em>支持选择/拖拽/粘贴上传图片,并生成图片地址,HTML,UBB和 Markdown等格式,支持浏览和删除历史记录</em></td><td><a href="https://chrome.google.com/webstore/detail/新浪微博图床/fdfdnfpdplfbbnemmmoklbfjbhecpnhf?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E5%9B%BE%E5%BA%8A/fdfdnfpdplfbbnemmmoklbfjbhecpnhf?hl=zh-CN</a></td></tr><tr><td>Imagus</td><td><em>图片放大镜、链接预览插件</em></td><td><a href="https://chrome.google.com/webstore/detail/imagus/immpkjjlgappgfkkfieppnmlhakdmaab?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/imagus/immpkjjlgappgfkkfieppnmlhakdmaab?hl=zh-CN</a></td></tr><tr><td>一键管理所有扩展</td><td><em>功能如名称一样直白</em></td><td><a href="https://chrome.google.com/webstore/detail/一键管理扩展/lboblnfejcmcaplhnbkkfcienhlhpnni?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/%E4%B8%80%E9%94%AE%E7%AE%A1%E7%90%86%E6%89%A9%E5%B1%95/lboblnfejcmcaplhnbkkfcienhlhpnni?hl=zh-CN</a></td></tr></tbody></table><h5 id="开发工具类"><a href="#开发工具类" class="headerlink" title="开发工具类"></a>开发工具类</h5><table><thead><tr><th>名称</th><th>说明</th><th>🔗</th></tr></thead><tbody><tr><td>JavaScript and CSS Code Beautifier</td><td><em>一款可以格式化 js、css、json 文件的扩展。打开 .css / .js / .json 文件时，可以美化 CSS，JavaScript 和 JSON 代码。</em></td><td><a href="https://chrome.google.com/webstore/detail/javascript-and-css-code-b/iiglodndmmefofehaibmaignglbpdald?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/javascript-and-css-code-b/iiglodndmmefofehaibmaignglbpdald?hl=zh-CN</a></td></tr><tr><td>JSON View</td><td><em>一款可以验证、查看、并格式化 JSON 文档的扩展。</em></td><td><a href="https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc?hl=zh-CN</a></td></tr><tr><td>Web Scraper</td><td><em>一款可以抓取网页数据的扩展l（爬虫）。</em></td><td><a href="https://chrome.google.com/webstore/detail/web-scraper/jnhgnonknehpejjnehehllkliplmbmhn?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/web-scraper/jnhgnonknehpejjnehehllkliplmbmhn?hl=zh-CN</a></td></tr><tr><td>Octotree</td><td><em>一款以树形结构显示 Github 仓库的代码，省去一级一级查找。堪称浏览 Github 必备拓展。</em></td><td><a href="https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?hl=zh-CN</a></td></tr><tr><td>Reggy</td><td><em>一款可以创建随机身份并在几秒钟内注册任何网站！ Reggy 还包括一个内置的表格填充物。</em></td><td><a href="https://chrome.google.com/webstore/detail/reggy/pnneajlgffpejnabhionnhdfhibijihe?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/reggy/pnneajlgffpejnabhionnhdfhibijihe?hl=zh-CN</a></td></tr><tr><td>Postman</td><td><em>一款可以进行各种请求方式验证的扩展，如 Get、Post、Delete、等等。</em></td><td><a href="https://chrome.google.com/webstore/detail/postman-interceptor/aicmkgpgakddgnaphhhpliifpcfhicfo?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/postman-interceptor/aicmkgpgakddgnaphhhpliifpcfhicfo?hl=zh-CN</a>    <a href="https://chrome.google.com/webstore/detail/tabbed-postman-rest-clien/coohjcphdfgbiolnekdpbcijmhambjff?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/tabbed-postman-rest-clien/coohjcphdfgbiolnekdpbcijmhambjff?hl=zh-CN</a></td></tr><tr><td>Vysor</td><td><em>一款无需 root, 能够在 Chrome 里通过 USB 直接控制 Android 设备的扩展。</em></td><td><a href="https://chrome.google.com/webstore/detail/android-device-control-fr/molbiejnoondcinbfkhlcokoldjjikbl?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/android-device-control-fr/molbiejnoondcinbfkhlcokoldjjikbl?hl=zh-CN</a></td></tr><tr><td>Xpath Helper</td><td><em>一款支持在网页点击元素生成xpath，整个抓取使用了xpath、正则表达式、消息中间件、多线程调度框架的chrome插件。</em></td><td><a href="https://chrome.google.com/webstore/detail/xpath-helper/hgimnogjllphhhkhlmebbmlgjoejdpjl?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/xpath-helper/hgimnogjllphhhkhlmebbmlgjoejdpjl?hl=zh-CN</a></td></tr><tr><td>github-downloader</td><td><em>一款可以下单单个 Github 项目文件扩展程序，无需下载整个项目。</em></td><td><a href="https://chrome.google.com/webstore/detail/github-downloader/jplmabjbdhggnlhndkdfciacklbjcfel?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/github-downloader/jplmabjbdhggnlhndkdfciacklbjcfel?hl=zh-CN</a></td></tr><tr><td>BrowserStack</td><td>* 一款 WEB 网站浏览器兼容性测试的 Chrome 扩展。*</td><td><a href="https://chrome.google.com/webstore/detail/browserstack/nkihdmlheodkdfojglpcjjmioefjahjb?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/browserstack/nkihdmlheodkdfojglpcjjmioefjahjb?hl=zh-CN</a></td></tr><tr><td>WhatFont</td><td><em>一款可以查看当前网页字体详细信息的扩展。</em></td><td><a href="https://chrome.google.com/webstore/detail/whatfont/jabopobgcpjmedljpbcaablpmlmfcogm?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/whatfont/jabopobgcpjmedljpbcaablpmlmfcogm?hl=zh-CN</a></td></tr><tr><td>谷歌访问助手</td><td><em>这个不需要多做介绍吧？!</em></td><td></td></tr><tr><td>Clear Cache</td><td><em>点击图标即可清除缓存、cookie等，开发必备！</em></td><td><a href="https://chrome.google.com/webstore/detail/clear-cache/cppjkneekbjaeellbfkmgnhonkkjfpdn?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/clear-cache/cppjkneekbjaeellbfkmgnhonkkjfpdn?hl=zh-CN</a></td></tr><tr><td>Vimium</td><td><em>Vim 和 Chromium 的合体，继承了 Vim 的常用操作，完全脱离鼠标来控制浏览器，是一款黑客级别的 Chrome 插件。</em></td><td><a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=zh-CN</a></td></tr><tr><td>Code Cola</td><td><em>一个可视化编辑在线页面css样式的chrome插件。</em></td><td><a href="https://chrome.google.com/webstore/detail/code-cola/lomkpheldlbkkfiifcbfifipaofnmnkn?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/code-cola/lomkpheldlbkkfiifcbfifipaofnmnkn?hl=zh-CN</a></td></tr><tr><td>Tampermonkey</td><td><em>俗称 ‘油猴’，是一款功能非常强大的插件，包含：方便的脚本管理、脚本概览、设置多样性、脚本自动更新、安全、兼容性、Chrome 同步、CodeMirror 编辑器、JSHint 语法检查、快速开发、卸载等功能。</em></td><td><a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?hl=zh-CN</a></td></tr><tr><td>为什么你们就是不能加个空格呢</td><td><em>有排版强迫症必备，插件会自动把网页中所有中文、英文、数字、符号之间插入一个空格</em></td><td><a href="https://chrome.google.com/webstore/detail/為什麼你們就是不能加個空格呢？/paphcfdffjnbcgkokihcdjliihicmbpd?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/%E7%82%BA%E4%BB%80%E9%BA%BC%E4%BD%A0%E5%80%91%E5%B0%B1%E6%98%AF%E4%B8%8D%E8%83%BD%E5%8A%A0%E5%80%8B%E7%A9%BA%E6%A0%BC%E5%91%A2%EF%BC%9F/paphcfdffjnbcgkokihcdjliihicmbpd?hl=zh-CN</a></td></tr><tr><td>Instapaper</td><td><em>稍后阅读神器</em></td><td><a href="https://chrome.google.com/webstore/detail/instapaper/ldjkgaaoikpmhmkelcgkgacicjfbofhh?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/instapaper/ldjkgaaoikpmhmkelcgkgacicjfbofhh?hl=zh-CN</a></td></tr><tr><td>Search by Image</td><td><em>以图搜图神器</em></td><td><a href="https://chrome.google.com/webstore/detail/search-by-image-by-google/dajedkncpodkggklbegccjpmnglmnflm?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/search-by-image-by-google/dajedkncpodkggklbegccjpmnglmnflm?hl=zh-CN</a></td></tr><tr><td>WhatRuns</td><td><em>一款用于了解网站技术的chrome网站技术分析工具，主要能通过分析网站页面所使用的框架、代码等技术以及页面所使用的样式等方面，让使用者能直观的了解网站的整体技术信息。</em></td><td><a href="https://chrome.google.com/webstore/detail/whatruns/cmkdbmfndkfgebldhnkbfhlneefdaaip?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/whatruns/cmkdbmfndkfgebldhnkbfhlneefdaaip?hl=zh-CN</a></td></tr><tr><td>AlloyDesigner</td><td><em>一款来自 Tencent AlloyTeam的前端开发工具，主要功能是加载Web页面的视觉稿，结合开发者工具(F12)进行页面的开发和调整。</em></td><td><a href="https://chrome.google.com/webstore/detail/alloydesigner/ojooeaohlmgpcjajikhmibcnbebfenid?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/alloydesigner/ojooeaohlmgpcjajikhmibcnbebfenid?hl=zh-CN</a></td></tr></tbody></table><h5 id="社交工具类"><a href="#社交工具类" class="headerlink" title="社交工具类"></a>社交工具类</h5><table><thead><tr><th>名称</th><th>说明</th><th>🔗</th></tr></thead><tbody><tr><td>眼不见心不烦（新浪微博）</td><td><em>一款可以无限制地屏蔽关键词、用户、来源，去除页面广告和推广微博，反刷屏的扩展，还您一个清爽干净的微博！</em></td><td><a href="https://chrome.google.com/webstore/detail/眼不见心不烦（新浪微博）/aognaapdfnnldnjglanfbbklaakbpejm?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/%E7%9C%BC%E4%B8%8D%E8%A7%81%E5%BF%83%E4%B8%8D%E7%83%A6%EF%BC%88%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%EF%BC%89/aognaapdfnnldnjglanfbbklaakbpejm?hl=zh-CN</a></td></tr><tr><td>一起惠购物助手</td><td><em>一款购物省钱必备助手插件，集返利、查货、比价、跟单、价格走势于一体</em></td><td><a href="https://chrome.google.com/webstore/detail/一起惠购物助手/jjcbbdnfiapchhkemifphepfgilhdokf?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/%E4%B8%80%E8%B5%B7%E6%83%A0%E8%B4%AD%E7%89%A9%E5%8A%A9%E6%89%8B/jjcbbdnfiapchhkemifphepfgilhdokf?hl=zh-CN</a></td></tr><tr><td>购物党</td><td><em>在线的比价工具，网购的时候可以看价格历史记录，以及各大网站的价格对比，也有查快递的快捷方式。</em></td><td><a href="https://chrome.google.com/webstore/detail/购物党自动比价工具/jgphnjokjhjlcnnajmfjlacjnjkhleah?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/%E8%B4%AD%E7%89%A9%E5%85%9A%E8%87%AA%E5%8A%A8%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7/jgphnjokjhjlcnnajmfjlacjnjkhleah?hl=zh-CN</a></td></tr></tbody></table><h5 id="转换工具类"><a href="#转换工具类" class="headerlink" title="转换工具类"></a>转换工具类</h5><table><thead><tr><th>名称</th><th>说明</th><th>🔗</th></tr></thead><tbody><tr><td>FromDocToPDF</td><td><em>一款可以把 doc 文件快速地转换成 pdf 文件的 chrome 扩展</em></td><td><a href="https://chrome.google.com/webstore/detail/pdf-viewer-converter-by-f/chnacmlpiecdhgkdgeoipkmdbekengck?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/pdf-viewer-converter-by-f/chnacmlpiecdhgkdgeoipkmdbekengck?hl=zh-CN</a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;正所谓：“工欲善其事必先利其器”，Chrome 扩展整理，你的 Chrome 有了这些扩展，绝对是如虎添翼。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;办公工具类&lt;/li&gt;
&lt;li&gt;开发工具类&lt;/li&gt;
&lt;li&gt;社交工具类&lt;/li&gt;
&lt;li&gt;转换工具类&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=
      
    
    </summary>
    
      <category term="Chrome" scheme="http://yoursite.com/categories/Chrome/"/>
    
      <category term="Browser" scheme="http://yoursite.com/categories/Chrome/Browser/"/>
    
    
      <category term="Chrome Extension" scheme="http://yoursite.com/tags/Chrome-Extension/"/>
    
  </entry>
  
  <entry>
    <title>Dart 系列之数据类型</title>
    <link href="http://yoursite.com/2020/01/17/Dart%20%E7%B3%BB%E5%88%97%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2020/01/17/Dart 系列之数据类型/</id>
    <published>2020-01-17T02:53:51.000Z</published>
    <updated>2020-01-17T03:17:53.674Z</updated>
    
    <content type="html"><![CDATA[<h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><ul><li>Dart 语言内建类型：<ul><li>Number</li><li>String</li><li>Boolean</li><li>List</li><li>Map</li><li>Set</li><li>Rune</li><li>Symbol</li></ul></li></ul><p>接下来一起来看每种类型的详细用法（配有相关代码示例）。</p><ul><li>Number</li></ul><p><code>int</code> 和 <code>double</code> 都是 <a href="https://api.dartlang.org/stable/dart-core/num-class.html" target="_blank" rel="noopener"><code>num</code>.</a> 的亚类型。 num 类型包括基本运算 +， -， /， 和 *， 以及 <code>abs()</code>，<code>ceil()</code>， 和 <code>floor()</code>， 等函数方法。 （按位运算符，例如»，定义在 int 类中。） 如果 num 及其亚类型找不到你想要的方法， 尝试查找使用 <a href="https://api.dartlang.org/stable/dart-math" target="_blank" rel="noopener">dart:math</a> 库。</p><ul><li><p>int</p><p>整数值不大于64位， 具体取决于平台。 在 Dart VM 上， 值的范围从 -263 到 263 - 1. Dart 被编译为 JavaScript 时，使用 <a href="https://stackoverflow.com/questions/2802957/number-of-bits-in-javascript-numbers/2803010#2803010" target="_blank" rel="noopener">JavaScript numbers,</a> 值的范围从 -253 到 253 - 1.</p></li><li><p>double</p><p>64位（双精度）浮点数，依据 IEEE 754 标准。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义整数类形</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> hex = <span class="number">0xD82940</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 double 类型</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">var</span> exponents = <span class="number">1.42e5</span>;</span><br><span class="line">     </span><br><span class="line"><span class="comment">// 从 Dart 2.1 开始，必要的时候 int 字面量会自动转换成 double 类型。</span></span><br><span class="line"><span class="built_in">double</span> z = <span class="number">1</span>; <span class="comment">// 相当于 double z = 1.0.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"------------------- 分割线 ---------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据类型转换</span></span><br><span class="line"><span class="comment">// String -&gt; int</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">num</span> = <span class="built_in">int</span>.parse(<span class="string">"12306"</span>);</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">num</span> == <span class="number">12306</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// String -&gt; double</span></span><br><span class="line"><span class="keyword">var</span> dob = <span class="built_in">double</span>.parse(<span class="string">"3.1415926"</span>);</span><br><span class="line"><span class="keyword">assert</span>(dob == <span class="number">3.1415926</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// int -&gt; String</span></span><br><span class="line"><span class="keyword">var</span> int2str = <span class="number">18.</span>toString();</span><br><span class="line"><span class="keyword">assert</span>(int2str == <span class="string">"18"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// double -&gt; String</span></span><br><span class="line"><span class="keyword">var</span> dob2str = <span class="number">3.1415</span>.toString();</span><br><span class="line"><span class="keyword">assert</span>(dob2str == <span class="string">"3.1415"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 按位操作:移位（&lt;&lt;， &gt;&gt;），按位与（&amp;）以及 按位或（|）</span></span><br><span class="line"><span class="keyword">assert</span>((<span class="number">3</span> &lt;&lt; <span class="number">1</span>) == <span class="number">6</span>); <span class="comment">// 0011 &lt;&lt; 1 == 0110</span></span><br><span class="line"><span class="keyword">assert</span>((<span class="number">3</span> &gt;&gt; <span class="number">1</span>) == <span class="number">1</span>); <span class="comment">// 0011 &gt;&gt; 1 == 0001</span></span><br><span class="line"><span class="keyword">assert</span>((<span class="number">3</span> | <span class="number">4</span>) == <span class="number">7</span>); <span class="comment">// 0011 | 0100 == 0111</span></span><br></pre></td></tr></table></figure></li><li><p>String </p><p>Dart 字符串是一组 UTF-16 单元序列。 字符串通过单引号或者双引号创建。字符串可以通过 <code>${</code><em><code>expression</code></em><code>}</code> 的方式内嵌表达式。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串创建</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="string">"create s1 string"</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">"create s2 string"</span>;</span><br><span class="line"><span class="keyword">var</span> s3 = <span class="string">"create s3 string"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">"Hello Dart, test"</span>;</span><br><span class="line"><span class="keyword">assert</span>(<span class="string">"create s1 string <span class="subst">$s</span>"</span> == s1 + <span class="string">" Hello Dart, test"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串拼接</span></span><br><span class="line"><span class="keyword">var</span> str = s1 + s2 + s3;</span><br><span class="line"><span class="built_in">print</span>(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建多行字符串</span></span><br><span class="line"><span class="keyword">var</span> multipleStr = <span class="string">"""</span></span><br><span class="line"><span class="string">  三里清风三里路，</span></span><br><span class="line"><span class="string">  步步清风再无你。</span></span><br><span class="line"><span class="string">"""</span>;</span><br><span class="line"><span class="built_in">print</span>(multipleStr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建原始字符串：使用 r 作为前缀</span></span><br><span class="line"><span class="keyword">var</span> strs = <span class="string">"http://www.baidu. \ncom"</span>;</span><br><span class="line"><span class="keyword">var</span> originalStr = <span class="string">r"http://www.baidu. \ncom"</span>;</span><br><span class="line"><span class="built_in">print</span>(strs);</span><br><span class="line"><span class="built_in">print</span>(originalStr);</span><br></pre></td></tr></table></figure></li><li><p>Boolean</p><p>Dart 使用 <code>bool</code> 类型表示布尔值。 Dart 只有字面量 <code>true</code> and <code>false</code> 是布尔类型， 这两个对象都是编译时常量。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查空字符串/非空字符串</span></span><br><span class="line"><span class="keyword">var</span> emptyStr = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">assert</span>(emptyStr.isEmpty);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断 0 值</span></span><br><span class="line"><span class="keyword">var</span> hintPoint = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">assert</span>(hintPoint &lt;= <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 null 值</span></span><br><span class="line"><span class="keyword">var</span> unicon;</span><br><span class="line"><span class="keyword">assert</span>(unicon == <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 NaN</span></span><br><span class="line"><span class="keyword">var</span> iMeantToDoThis = <span class="number">0</span> / <span class="number">0</span>;</span><br><span class="line"><span class="keyword">assert</span>(iMeantToDoThis.isNaN);</span><br></pre></td></tr></table></figure></li><li><p>List</p><p>Dart 中的 <em>Array</em> 就是 <a href="https://api.dartlang.org/stable/dart-core/List-class.html" target="_blank" rel="noopener">List</a> 对象， 通常称之为 <em>List</em> 。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建列表</span></span><br><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">print</span>(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 list 的长度</span></span><br><span class="line"><span class="built_in">print</span>(list.length);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问列表的元素</span></span><br><span class="line"><span class="built_in">print</span>(list[<span class="number">1</span>] == <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 List 字面量之前添加 const 关键字，可以定义 List 类型的编译时常量</span></span><br><span class="line"><span class="keyword">var</span> constantList = <span class="keyword">const</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="keyword">true</span>];</span><br><span class="line"><span class="comment">// constantList[1] = 1;  // 取消注释会引起错误。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">list.insert(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">list.add(<span class="number">7</span>);</span><br><span class="line"><span class="built_in">print</span>(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除元素</span></span><br><span class="line">list.removeAt(<span class="number">6</span>);</span><br><span class="line">list.remove(<span class="number">6</span>);</span><br><span class="line"><span class="built_in">print</span>(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除元素</span></span><br><span class="line">list.clear();</span><br><span class="line"><span class="built_in">print</span>(list);</span><br></pre></td></tr></table></figure></li><li><p>Map</p><p>通常来说， Map 是用来关联 keys 和 values 的对象。 keys 和 values 可以是任何类型的对象。在一个 Map 对象中一个 <em>key</em> 只能出现一次。 但是 <em>value</em> 可以出现多次。 Dart 中 Map 通过 Map 字面量 和 <a href="https://api.dartlang.org/stable/dart-core/Map-class.html" target="_blank" rel="noopener">Map</a> 类型来实现。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建泛型为&lt;String, String&gt;</span></span><br><span class="line"><span class="keyword">var</span> gifts = &#123;</span><br><span class="line">  <span class="comment">// Key: Value</span></span><br><span class="line">  <span class="string">"first"</span>: <span class="string">"Apple"</span>,</span><br><span class="line">  <span class="string">"second"</span>: <span class="string">"ring"</span>,</span><br><span class="line">  <span class="string">"third"</span>: <span class="string">"videos"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建泛型为&lt;int, String&gt;</span></span><br><span class="line"><span class="keyword">var</span> nodeCase = &#123;<span class="number">0</span>: <span class="string">"apple"</span>, <span class="number">1</span>: <span class="string">"banana"</span>, <span class="number">2</span>: <span class="string">"car"</span>, <span class="number">3</span>: <span class="string">"dot"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加</span></span><br><span class="line"><span class="keyword">var</span> gift = <span class="built_in">Map</span>(); <span class="comment">// 等价于 var gift = new Map();</span></span><br><span class="line">gift[<span class="string">'first'</span>] = <span class="string">'Apple'</span>; <span class="comment">// add key - value</span></span><br><span class="line">gift[<span class="string">'second'</span>] = <span class="string">'Banana'</span>;</span><br><span class="line">gift[<span class="string">'third'</span>] = <span class="string">'Car'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> node = <span class="built_in">Map</span>();</span><br><span class="line">node[<span class="number">0</span>] = <span class="string">'apple'</span>;</span><br><span class="line">node[<span class="number">1</span>] = <span class="string">'banana'</span>;</span><br><span class="line">node[<span class="number">2</span>] = <span class="string">'car'</span>;</span><br><span class="line">node[<span class="number">3</span>] = <span class="string">'dot'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(gift[<span class="string">'first'</span>] == <span class="string">'Apple'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当 Map 中不存在 key 的时候会返回 null</span></span><br><span class="line"><span class="keyword">assert</span>(gift[<span class="string">'fourth'</span>] == <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 Map 的长度</span></span><br><span class="line"><span class="built_in">print</span>(gift.length);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 Map 类型运行时常量，要在 Map 字面量前加上关键字 const。</span></span><br><span class="line"><span class="keyword">final</span> constantMap = <span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="number">2</span>: <span class="string">'helium'</span>,</span><br><span class="line">  <span class="number">10</span>: <span class="string">'neon'</span>,</span><br><span class="line">  <span class="number">18</span>: <span class="string">'argon'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// constantMap[2] = 'Helium'; // Error</span></span><br></pre></td></tr></table></figure></li><li><p>Set</p><p>Dart 中 Set 是一个元素唯一且无需的集合。 Dart 为 Set 提供了 Set 字面量和 <a href="https://api.dartlang.org/stable/dart-core/Set-class.html" target="_blank" rel="noopener">Set</a> 类型。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建</span></span><br><span class="line"><span class="keyword">var</span> createSet = &#123;<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>, <span class="string">"four"</span>&#125;; <span class="comment">// 自动推断泛型为 String</span></span><br><span class="line"><span class="keyword">var</span> nullSet = &lt;<span class="built_in">String</span>&gt;&#123;&#125;; <span class="comment">// 创建空的 Set 对象</span></span><br><span class="line"><span class="comment">// Set&lt;String&gt; names = &#123;&#125;; // 这样也是可以的。</span></span><br><span class="line"><span class="comment">// &#123;&#125; 默认是 Map 类型</span></span><br><span class="line"><span class="comment">// var names = &#123;&#125;; // 这样会创建一个 Map ，而不是 Set 。</span></span><br><span class="line"><span class="built_in">print</span>(createSet);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set 的相关操作</span></span><br><span class="line"><span class="comment">// 添加</span></span><br><span class="line"><span class="keyword">var</span> elements = &lt;<span class="built_in">String</span>&gt;&#123;&#125;;</span><br><span class="line">elements.add(<span class="string">"Apple"</span>);</span><br><span class="line">elements.addAll(createSet);</span><br><span class="line"><span class="built_in">print</span>(elements);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 Set 长度</span></span><br><span class="line"><span class="built_in">print</span>(elements.length);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个编译时 Set 常量</span></span><br><span class="line"><span class="keyword">final</span> constantSet = <span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="string">'Apple'</span>,</span><br><span class="line">  <span class="string">'Banana'</span>,</span><br><span class="line">  <span class="string">'Carrot'</span>,</span><br><span class="line">  <span class="string">'Dot'</span>,</span><br><span class="line">  <span class="string">'Earth'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// constantSet.add('Dot'); // Uncommenting this causes an error.</span></span><br><span class="line"><span class="built_in">print</span>(constantSet);</span><br></pre></td></tr></table></figure></li><li><p>Rune(在字符串中标识 Unicode 字符)</p><p>在 Dart 中， Rune 用来表示字符串中的 UTF-32 编码字符。Unicode 定义了一个全球的书写系统编码， 系统中使用的所有字母，数字和符号都对应唯一的数值编码。 由于 Dart 字符串是一系列 UTF-16 编码单元， 因此要在字符串中表示 32 位 Unicode 值需要特殊语法支持。表示 Unicode 编码的常用方法是， <code>\uXXXX</code>, 这里 XXXX 是一个4位的16进制数。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Rune 格式：\u&#123;xxxx&#125;</span></span><br><span class="line"><span class="keyword">var</span> simle = <span class="string">"\u&#123;1f600&#125;"</span>;</span><br><span class="line"><span class="keyword">var</span> heartShape = <span class="string">"\u&#123;2665&#125;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(simle + <span class="string">" -- "</span> + heartShape);   <span class="comment">// 😀 -- ♥</span></span><br></pre></td></tr></table></figure></li><li><p>Symbol</p><p>一个 Symbol 对象表示 Dart 程序中声明的运算符或者标识符。 你也许永远都不需要使用 Symbol ，但要按名称引用标识符的 API 时， Symbol 就非常有用了。 因为代码压缩后会改变标识符的名称，但不会改变标识符的符号。 通过字面量 Symbol ，也就是标识符前面添加一个 <code>#</code> 号，来获取标识符的 Symbol 。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> radix = #radix;</span><br><span class="line"><span class="keyword">var</span> bar = #bar;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(radix);   <span class="comment">// Symbol("radix")</span></span><br><span class="line"><span class="built_in">print</span>(bar);     <span class="comment">// Symbol("bar")</span></span><br></pre></td></tr></table></figure></li></ul><p>至此，Dart 系列之数据类型就结束了，如有任何问题，欢迎交流和指正。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Dart 语言内建类型：&lt;ul&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Boo
      
    
    </summary>
    
      <category term="Dart" scheme="http://yoursite.com/categories/Dart/"/>
    
    
      <category term="Dart" scheme="http://yoursite.com/tags/Dart/"/>
    
      <category term="开发环境搭建" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Dart 系列之环境搭建</title>
    <link href="http://yoursite.com/2020/01/15/Dart%20%E7%B3%BB%E5%88%97%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2020/01/15/Dart 系列之环境搭建/</id>
    <published>2020-01-15T13:50:19.000Z</published>
    <updated>2020-01-17T03:18:10.218Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Dart-系列之环境搭建"><a href="#Dart-系列之环境搭建" class="headerlink" title="Dart 系列之环境搭建"></a>Dart 系列之环境搭建</h3><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>个人的开发环境基于 IntelliJ IDEA 来搭建，所以这篇文章是以 IntelliJ IDEA 为例。</p><ol><li>下载 SDK 并配置环境变量。</li><li>安装 Dart 插件。</li><li>配置已安装的 SDK 插件路径。</li></ol><h6 id="下载-SDK-并配置环境变量"><a href="#下载-SDK-并配置环境变量" class="headerlink" title="下载 SDK 并配置环境变量"></a>下载 SDK 并配置环境变量</h6><ul><li>Dart SDK 下载地址：<a href="https://dart.dev/get-dart" target="_blank" rel="noopener">Dart SDK 下载</a>，支持 Windows、Linux、Mac 三大平台的安装。<ul><li>Windows</li><li>Linux</li><li>Mac</li></ul></li></ul><p>注：这里需要额外说明一下，不建议使用命令安装 SDK，建议使用如下链家安装：<a href="https://www.gekorm.com/dart-windows" target="_blank" rel="noopener">https://www.gekorm.com/dart-windows</a></p><ul><li><p>配置环境变量</p><p>我的电脑 –&gt; 属性 –&gt; 高级系统设置 –&gt; 环境变量 –&gt;  Path 添加已安装的 SDK 路径（E:\Dart\dart-sdk\bin） –&gt; 保存</p></li></ul><h6 id="安装-Dart-插件"><a href="#安装-Dart-插件" class="headerlink" title="安装 Dart 插件"></a>安装 Dart 插件</h6><p>打开 IDEA, File -&gt; Settings -&gt; Plugins,搜索 Dart 点击安装完成后，重新启动 IDEA 。</p><h6 id="配置已安装的-SDK-插件路径"><a href="#配置已安装的-SDK-插件路径" class="headerlink" title="配置已安装的 SDK 插件路径"></a>配置已安装的 SDK 插件路径</h6><ul><li><p>选择新建项目类型并设置已安装 SDK 的路径</p><p>![配置 SDK 路径](D:\Work\github_file\SimplationWANGBlogs\source\dart source\配置 SDK 路径.png)</p></li><li><p>设置项目名称和路径</p><p>![设置项目名称和路径](D:\Work\github_file\SimplationWANGBlogs\source\dart source\设置项目名称和路径.png)</p></li><li><p>点击 Finish 然后就可以愉快的玩耍。</p></li></ul><p>至此，Dart 环境搭建就结束了，如有任何问题，欢迎交流`和指正。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Dart-系列之环境搭建&quot;&gt;&lt;a href=&quot;#Dart-系列之环境搭建&quot; class=&quot;headerlink&quot; title=&quot;Dart 系列之环境搭建&quot;&gt;&lt;/a&gt;Dart 系列之环境搭建&lt;/h3&gt;&lt;h4 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; cla
      
    
    </summary>
    
      <category term="Dart" scheme="http://yoursite.com/categories/Dart/"/>
    
    
      <category term="Dart" scheme="http://yoursite.com/tags/Dart/"/>
    
      <category term="开发环境搭建" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Java 关键字整理.md</title>
    <link href="http://yoursite.com/2019/09/28/Java%20%E5%85%B3%E9%94%AE%E5%AD%97%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2019/09/28/Java 关键字整理/</id>
    <published>2019-09-28T15:30:18.000Z</published>
    <updated>2020-01-14T14:41:04.321Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Java-关键字"><a href="#Java-关键字" class="headerlink" title="Java 关键字"></a>Java 关键字</h5><ul><li><p>概念：Java 关键字是对 Java 编译器有特殊含义的字符串，是编译器和程序员的一个约定，程序员利用关键字来告诉编译器其声明的变量类型、类、方法特性等信息。</p></li><li><p>关键字整理</p><table><thead><tr><th align="center"><strong>关键字</strong></th><th align="left"><strong>含义</strong></th></tr></thead><tbody><tr><td align="center">abstract</td><td align="left">表明类或者成员方法具有抽象属性</td></tr><tr><td align="center">assert</td><td align="left">断言，用来进行程序调试</td></tr><tr><td align="center">boolean</td><td align="left">基本数据类型之一，声明布尔类型的关键字</td></tr><tr><td align="center">break</td><td align="left">提前跳出一个块</td></tr><tr><td align="center">byte</td><td align="left">基本数据类型之一，字节类型</td></tr><tr><td align="center">case</td><td align="left">用在 switch 语句之中，表示其中的一个分支</td></tr><tr><td align="center">catch</td><td align="left">用在异常处理中，用来捕捉异常</td></tr><tr><td align="center">char</td><td align="left">基本数据类型之一，字符类型</td></tr><tr><td align="center">class</td><td align="left">声明一个类</td></tr><tr><td align="center">const</td><td align="left">保留关键字，没有具体含义</td></tr><tr><td align="center">continue</td><td align="left">回到一个块的开始处</td></tr><tr><td align="center">default</td><td align="left">默认，例如，用在 switch 语句中，表明一个默认的分支。Java8 中也作用于声明接口函数的默认实现</td></tr><tr><td align="center">do</td><td align="left">用在 do-while 循环结构中</td></tr><tr><td align="center">double</td><td align="left">基本数据类型之一，双精度浮点数类型</td></tr><tr><td align="center">else</td><td align="left">用在条件语句中，表明当条件不成立时的分支</td></tr><tr><td align="center">enum</td><td align="left">枚举</td></tr><tr><td align="center">extends</td><td align="left">表明一个类型是另一个类型的子类型。对于类，可以是另一个类或者抽象类；对于接口，可以是另一个接口</td></tr><tr><td align="center">final</td><td align="left">用来说明最终属性，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变，用来定义常量</td></tr><tr><td align="center">finally</td><td align="left">用于处理异常情况，用来声明一个基本肯定会被执行到的语句块</td></tr><tr><td align="center">float</td><td align="left">基本数据类型之一，单精度浮点数类型</td></tr><tr><td align="center">for</td><td align="left">一种循环结构的引导词</td></tr><tr><td align="center">goto</td><td align="left">保留关键字，没有具体含义</td></tr><tr><td align="center">if</td><td align="left">条件语句的引导词</td></tr><tr><td align="center">implements</td><td align="left">表明一个类实现了给定的接口</td></tr><tr><td align="center">import</td><td align="left">表明要访问指定的类或包</td></tr><tr><td align="center">instanceof</td><td align="left">用来测试一个对象是否是指定类型的实例对象</td></tr><tr><td align="center">int</td><td align="left">基本数据类型之一，整数类型</td></tr><tr><td align="center">interface</td><td align="left">接口</td></tr><tr><td align="center">long</td><td align="left">基本数据类型之一，长整数类型</td></tr><tr><td align="center">native</td><td align="left">用来声明一个方法是由与计算机相关的语言（如 C / C++ / FORTRAN 语言）实现的</td></tr><tr><td align="center">new</td><td align="left">用来创建新实例对象</td></tr><tr><td align="center">package</td><td align="left">包</td></tr><tr><td align="center">private</td><td align="left">一种访问控制方式：私用模式</td></tr><tr><td align="center">protected</td><td align="left">一种访问控制方式：保护模式</td></tr><tr><td align="center">public</td><td align="left">一种访问控制方式：共用模式</td></tr><tr><td align="center">return</td><td align="left">从成员方法中返回数据</td></tr><tr><td align="center">short</td><td align="left">基本数据类型之一,短整数类型</td></tr><tr><td align="center">static</td><td align="left">表明具有静态属性</td></tr><tr><td align="center">strictfp</td><td align="left">用来声明 FP_strict（单精度或双精度浮点数）表达式遵循 IEEE 754 算术规范</td></tr><tr><td align="center">super</td><td align="left">表明当前对象的父类型的引用或者父类型的构造方法</td></tr><tr><td align="center">switch</td><td align="left">分支语句结构的引导词</td></tr><tr><td align="center">synchronized</td><td align="left">表明一段代码需要同步执行</td></tr><tr><td align="center">this</td><td align="left">指向当前实例对象的引用</td></tr><tr><td align="center">throw</td><td align="left">抛出一个异常</td></tr><tr><td align="center">throws</td><td align="left">声明在当前定义的成员方法中所有需要抛出的异常</td></tr><tr><td align="center">transient</td><td align="left">声明不用序列化的成员域</td></tr><tr><td align="center">try</td><td align="left">尝试一个可能抛出异常的程序块</td></tr><tr><td align="center">void</td><td align="left">声明当前成员方法没有返回值</td></tr><tr><td align="center">volatile</td><td align="left">表明两个或者多个变量必须同步地发生变化</td></tr><tr><td align="center">while</td><td align="left">用在循环结构中</td></tr></tbody></table></li></ul><ul><li><p>分类</p><ul><li><p>数据类型：</p><p>用于数据类型的关键字有 boolean、byte、char、 double、 false、float、int、long、new、null、short、true、void、instanceof；</p></li><li><p>语句：</p><p>用于语句的关键字有 break、case、 catch、 continue、 default 、do、 else、 for、 if、return、switch、try、 while、 finally、 throw、this、 super；</p></li><li><p>修饰：</p><p>用于修饰的关键字有 abstract、final、native、private、 protected、public、static、synchronized、<br>　　transient、 volatile；</p></li><li><p>方法、类、接口、包和异常：</p><p>用于方法、类、接口、包和异常的关键字有 class、 extends、 implements、interface、 package、import、throws；</p></li><li><p>还有些关键字,如 cat、 future、 generic、innerr、 operator、 outer、rest、var 等都是 Java 保留的没有意义的关键字。</p></li></ul></li></ul><ul><li><p>使用介绍</p><ul><li><p>示例代码为伪代码，无法正常运行。 </p></li><li><p><strong>abstract</strong></p><ul><li><p>abstract 关键字可以修饰类或方法。abstract 类可以扩展（增加子类），但不能直接实例化。abstract 方法不在声明它的类中实现，但必须在某个子类中重写。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">myMethod</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line">采用 <span class="keyword">abstract</span> 方法的类本来就是抽象类，并且必须声明为 <span class="keyword">abstract</span>。<span class="keyword">abstract</span> 类不能实例化。仅当 <span class="keyword">abstract</span> 类的子类实现其超类的所有 <span class="keyword">abstract</span> 方法时，才能实例化 <span class="keyword">abstract</span> 类的子类。这种类称为具体类，以区别于 <span class="keyword">abstract</span> 类。如果 <span class="keyword">abstract</span> 类的子类没有实现其超类的所有 <span class="keyword">abstract</span> 方法，该子类也是 <span class="keyword">abstract</span> 类。<span class="keyword">abstract</span> 关键字不能应用于 <span class="keyword">static</span>、<span class="keyword">private</span> 或 <span class="keyword">final</span> 方法，因为这些方法不能被重写，因此，不能在子类中实现。<span class="keyword">final</span> 类的方法都不能是 <span class="keyword">abstract</span>，因为 <span class="keyword">final</span> 类不能有子类。</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><ul><li><p><strong>boolean</strong></p><ul><li><p>boolean 变量的值可以是 true 或 false。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> valid = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (valid) &#123;</span><br><span class="line">&lt;statement&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line"><span class="keyword">boolean</span> 变量只能以 <span class="keyword">true</span> 或 <span class="keyword">false</span> 作为值。<span class="keyword">boolean</span> 不能与数字类型相互转换。包含 <span class="keyword">boolean</span> 操作数的表达式只能包含 <span class="keyword">boolean</span> 操作数。Boolean 类是 <span class="keyword">boolean</span> 原始类型的包装对象类。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>break</strong></p><ul><li><p>用于提前退出 for、while 或 do 循环，或者在 switch 语句中用来结束 case 块。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; max; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (&lt;loop finished early &gt;) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> type = &lt;some value&gt;;</span><br><span class="line"><span class="keyword">switch</span> (type) &#123;</span><br><span class="line">case1:</span><br><span class="line">&lt;statement&gt;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">case2:</span><br><span class="line">        &lt;statement&gt;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        &lt;statement&gt;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line"><span class="keyword">break</span> 总是退出最深层的 <span class="keyword">while</span>、<span class="keyword">for</span>、<span class="keyword">do</span> 或 <span class="keyword">switch</span> 语句</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>byte</strong></p><ul><li><p>byte 是 Java 原始类型。byte 可存储在 [-128,127] 范围以内的整数值。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">byteb = <span class="number">124</span>;</span><br><span class="line"></span><br><span class="line">-示例-</span><br><span class="line">Byte 类是 <span class="keyword">byte</span> 原始类型的包装对象类。它定义代表此类型的值的范围的MIN_VALUE和MAX_VALUE常量。Java 中的所有整数值都是 <span class="number">32</span> 位的 <span class="keyword">int</span> 值，除非值后面有 l 或 L（如 <span class="number">235L</span>），这表示该值应解释为 <span class="keyword">long</span> 。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>case</strong></p><ul><li><p>用来标记 switch 语句中的每个分支。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> type = &lt;some value&gt;;</span><br><span class="line"><span class="keyword">switch</span> (type) &#123;</span><br><span class="line">case1:</span><br><span class="line">&lt;statement&gt;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    case2:</span><br><span class="line">        &lt;statement&gt;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        &lt;statement&gt;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-示例-</span><br><span class="line"><span class="keyword">case</span> 块没有隐式结束点。<span class="keyword">break</span> 语句通常在每个 <span class="keyword">case</span> 块末尾使用，用于退出 <span class="keyword">switch</span> 语句。</span><br><span class="line">如果没有 <span class="keyword">break</span> 语句，执行流将进入所有后面的 <span class="keyword">case</span> 和/或 <span class="keyword">default</span> 块。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>catch</strong></p><ul><li><p>catch 关键字用来在 try-catch 或 try-catch-finally 语句中定义异常处理块。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">&lt;可能引发异常的块&gt;</span><br><span class="line">&#125; <span class="keyword">catch</span> (&lt;java.lang.Exception或子类 &gt; e) &#123;</span><br><span class="line">&lt;处理异常e的代码&gt;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    &lt;有异常或无异常情况下都执行的语句&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-示例-</span><br><span class="line">开始和结束标记&#123;和&#125;是 <span class="keyword">catch</span> 子句语法的一部分，即使该子句只包含一个语句，也不能省略这两个标记。每个 <span class="keyword">try</span> 块都必须至少有一个 <span class="keyword">catch</span> 或 <span class="keyword">finally</span> 子句。如果某个特定异常类未被任何 <span class="keyword">catch</span> 子句处理，该异常将沿着调用栈递归地传播到下一个封闭 <span class="keyword">try</span> 块。如果任何封闭 <span class="keyword">try</span> 块都未捕获到异常，Java 解释器将退出，并显示错误消息和堆栈跟踪信息。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>char</strong></p><ul><li><p>char 是 Java 原始类型。char 变量可以存储一个 Unicode 字符。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> delimiter = <span class="string">';'</span>;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line">可以使用下列 <span class="keyword">char</span> 常量：</span><br><span class="line"></span><br><span class="line">\b-空格</span><br><span class="line">\f-换页</span><br><span class="line">\n-换行</span><br><span class="line">\r-回车</span><br><span class="line">\t-水平制表符</span><br><span class="line">\<span class="string">'-单引号</span></span><br><span class="line"><span class="string">\"-双引号</span></span><br><span class="line"><span class="string">\\-反斜杠</span></span><br><span class="line"><span class="string">\xxx-采用 xxx 编码的 Latin-1 字符。\x 和 \xx 均为合法形式，但可能引起混淆。</span></span><br><span class="line"><span class="string">\uxxxx-采用十六进制编码xxxx的Unicode字符。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Character 类包含一些可用来处理 char 变量的 static 方法，这些方法包括 isDigit()、isLetter()、isWhitespace()和toUpperCase()。char 值没有符号。</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>class</strong></p><ul><li><p>class关键字用来声明新的Java类，该类是相关变量和/或方法的集合。类是面向对象的程序设计方法的基本构造单位。类通常代表某种实际实体，如几何形状或人。类是对象的模板。每个对象都是类的一个实例。要使用类，通常使用new操作符将类的对象实例化，然后调用类的方法来访问类的功能。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line"><span class="keyword">float</span> width;</span><br><span class="line">    <span class="keyword">float</span> height;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">(<span class="keyword">float</span> w, <span class="keyword">float</span> h)</span> </span>&#123;</span><br><span class="line">         width = w;</span><br><span class="line">         height = h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>continue</strong></p><ul><li><p>continue 关键字用来跳转到 for、while 或 do 循环的下一个迭代。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; max; i++) &#123;</span><br><span class="line">&lt;statements&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(&lt;done with <span class="keyword">this</span> iteration&gt;) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;statements&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>default</strong></p><ul><li><p>default 关键字用来标记 switch 语句中的默认分支。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arg = &lt;some value&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(arg) &#123;</span><br><span class="line">case1:</span><br><span class="line">&lt;statements&gt;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">case2:</span><br><span class="line">&lt;statements&gt;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&lt;statements&gt;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line"><span class="keyword">default</span> 块没有隐式结束点。<span class="keyword">break</span> 语句通常在每个 <span class="keyword">case</span> 或 <span class="keyword">default</span> 块的末尾使用，以便在完成块时退出 <span class="keyword">switch</span> 语句。如果没有 <span class="keyword">default</span> 语句，其参数与任何 <span class="keyword">case</span> 块都不匹配的 <span class="keyword">switch</span> 语句将不执行任何操作。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>do</strong></p><ul><li><p>do 关键字用于指定一个在每次迭代结束时检查其条件的循环。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">&lt;statements&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!found);</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line"><span class="keyword">do</span> 循环体至少执行一次。条件表达式后面必须有分号。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>double</strong></p><ul><li><p>double 是 Java 原始类型。</p><p>double 变量可以存储双精度浮点值。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> ratio = .<span class="number">01</span>;</span><br><span class="line"><span class="keyword">double</span> diameter = <span class="number">6.15</span>;</span><br><span class="line"><span class="keyword">double</span> height = <span class="number">1.35E03</span>;<span class="comment">//1.35*103或1350.0</span></span><br><span class="line"><span class="keyword">double</span> height = <span class="number">1e-2</span>;<span class="comment">//1.0*10-2或0.01</span></span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line">由于浮点数据类型是实际数值的近似值，因此，一般不要对浮点数值进行是否相等的比较。Java 浮点数值可代表无穷大和 NaN（非数值）。Double 包装对象类用来定义常量 MIN_VALUE、MAX_VALUE、NEGATIVE_INFINITY、POSITIVE_INFINITY 和 NaN。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>else</strong></p><ul><li><p>else 关键字总是在 if-else 语句中与 if 关键字结合使用。else 子句是可选的，如果 if 条件为 false，则执行该子句。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(condition) &#123;</span><br><span class="line">&lt;statements&gt;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">&lt;statements&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>extends</strong></p><ul><li><p>extends 关键字用在 class 或 interface 声明中，用于指示所声明的类或接口是其名称后跟有 extends关键字的类或接口的子类。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Polygon</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-示例-</span><br><span class="line">在上例中，Rectangle 类继承 Polygon 类的所有 <span class="keyword">public</span> 和 <span class="keyword">protected</span> 变量和方法。Rectangle 类可以重写 Polygon 类的任何非 <span class="keyword">final</span> 方法。一个类只能扩展一个其他类。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>false</strong></p><ul><li><p>false 关键字代表 boolean 变量的两个合法值之一。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> is Complete = <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>final</strong></p><ul><li><p>final 关键字可以应用于类，以指示不能扩展该类（不能有子类）。final 关键字可以应用于方法，以指示不能重写任何子类中的方法。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFinalClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String myFinal <span class="title">Method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&lt;statements&gt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line">一个类不能同时是 <span class="keyword">abstract</span> 又是 <span class="keyword">final</span>。<span class="keyword">abstract</span> 意味着必须扩展类，<span class="keyword">final</span> 意味着不能扩展类。一个方法不能同时是 <span class="keyword">abstract</span> 又是 <span class="keyword">final</span>。<span class="keyword">abstract</span> 意味着必须重写方法，<span class="keyword">final</span> 意味着不能重写方法。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>finally</strong></p><ul><li><p>finally 关键字用来定义始终在 try-catch-finally 语句中执行的块。finally 块通常包含清理代码，用在部分执行 try 块后恢复正常运行。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">&lt;可能引发异常的块&gt;</span><br><span class="line">&#125; <span class="keyword">catch</span> (&lt;java.lang.Exception或子类&gt;e) &#123;</span><br><span class="line">&lt;处理异常e的代码&gt;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">&lt;有异常或无异常情况下都执行的语句&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line">开始和结束标记 &#123; 和 &#125; 是 <span class="keyword">finally</span> 子句语法的一部分，即使该子句只包含一个语句，也不能省略这两个标记。每个 <span class="keyword">try</span> 块都必须至少有一个 <span class="keyword">catch</span> 或 <span class="keyword">finally</span> 子句。如果执行 <span class="keyword">try</span> 块的任何部分，不论是否出现异常，也不论 <span class="keyword">try</span> 或 catc h块是否包含 <span class="keyword">return</span>、<span class="keyword">continue</span> 或 <span class="keyword">break</span> 语句，都一定会执行 <span class="keyword">finally</span> 块中的代码。如果不出现异常，控件将跳过<span class="keyword">try</span>块，进入<span class="keyword">finally</span>块。如果在执行<span class="keyword">try</span>块期间出现异常，并且相应的<span class="keyword">catch</span>块包含 <span class="keyword">break</span>、<span class="keyword">continue</span> 或 <span class="keyword">return</span> 语句，控件将首先穿过 <span class="keyword">finally</span> 块，之后再执行 <span class="keyword">break</span>、<span class="keyword">continue</span> 或 <span class="keyword">return</span>。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>float</strong></p><ul><li><p>float 是Java原始类型。</p><p>float 变量可以存储单精度浮点值。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> ratio = .<span class="number">01</span>;</span><br><span class="line"><span class="keyword">float</span> diameter = <span class="number">6.15</span>;</span><br><span class="line"><span class="keyword">float</span> height = <span class="number">1.35E03</span>;<span class="comment">// 1.35*103 或 1350.0</span></span><br><span class="line"><span class="keyword">float</span> height = <span class="number">1e-2</span>;<span class="comment">// 1.0*10-2 或 0.01</span></span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line">使用此关键字时应遵循下列规则：Java 中的浮点文字始终默认为双精度。要指定单精度文字值，应在数值后加上 f 或 F，如 <span class="number">0.01f</span>。由于浮点数据类型是实际数值的近似值，因此，一般不要对浮点数值进行是否相等的比较。Java 浮点数值可代表无穷大和 NaN（非数值）。Float 包装对象类用来定义常量MIN_VALUE、MAX_VALUE、NEGATIVE_INFINITY、POSITIVE_INFINITY 和 NaN。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>for</strong></p><ul><li><p>for 关键字用于指定一个在每次迭代结束前检查其条件的循环。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; max; i++) &#123;</span><br><span class="line">&lt;statements&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line"><span class="keyword">for</span> 语句的形式为 <span class="keyword">for</span> (initialize ; condition ; increment)。控件流进入 <span class="keyword">for</span> 语句时，将执行一次 initialize 语句。每次执行循环体之前将计算 condition 的结果。如果 condition 为 <span class="keyword">true</span> ，则执行循环体。每次执行循环体之后，在计算下一个迭代的 condition 之前，将执行 increment 语句。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>if</strong></p><ul><li><p>if 关键字指示有条件地执行代码块。条件的计算结果必须是布尔值。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">&lt;statements&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">&lt;statements&gt;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">&lt;statements&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line"><span class="keyword">if</span> 语句可以有可选的 <span class="keyword">else</span> 子句，该子句包含条件为 <span class="keyword">false</span> 时将执行的代码。包含 <span class="keyword">boolean</span> 操作数的表达式只能包含 <span class="keyword">boolean</span> 操作数。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>implements</strong></p><ul><li><p>implements 关键字在 class 声明中使用，以指示所声明的类提供了在 implements 关键字后面的名称所指定的接口中所声明的所有方法的实现。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Truck</span> <span class="keyword">implements</span> <span class="title">IVehicle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line">在上例中，Truck 类必须提供在 IVehicle 接口中所声明的所有方法的实现。否则，Truck 类将是独立的；它可以声明其他方法和变量，并扩展另一个类。一个类可以实现多个接口。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>import</strong></p><ul><li><p>import 关键字使一个包中的一个或所有类在当前 Java 源文件中可见。可以不使用完全限定的类名来引用导入的类。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line">当多个包包含同名的类时，许多 Java 程序员只使用特定的 <span class="keyword">import</span> 语句（没有 “*”）来避免不确定性。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>instanceof</strong></p><ul><li><p>instanceof 关键字用来确定对象所属的类。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode) &#123;</span><br><span class="line">&lt;statements&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line">在上例中，如果 node 是 TreeNode 类的实例，或者是 TreeNode 的子类的实例，则 <span class="keyword">instanceof</span> 表达式的值将为 <span class="keyword">true</span>。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>int</strong></p><ul><li><p>int 是 Java 原始类型。</p><p>int 变量可以存储 32 位的整数值。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> number = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> octalNumber = <span class="number">0377</span>;</span><br><span class="line"><span class="keyword">int</span> hexNumber = <span class="number">0xff</span>;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line">Integer 类是 <span class="keyword">int</span> 原始类型的包装对象类。它定义代表此类型的值的范围的 MIN_VALUE 和 MAX_VALUE 常量。Java 中的所有整数值都是 <span class="number">32</span> 位的 <span class="keyword">int</span> 值，除非值后面有 l或 L（如 <span class="number">235L</span>），这表示该值应解释为 <span class="keyword">long</span>。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>interface</strong></p><ul><li><p>interface 关键字用来声明新的 Java 接口，接口是方法的集合。接口是 Java 语言的一项强大功能。任何类都可声明它实现一个或多个接口，这意味着它实现了在这些接口中所定义的所有方法。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IPolygon</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getArea</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumberOfSides</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCircumference</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line">实现了接口的任何类都必须提供在该接口中的所有方法的实现。一个类可以实现多个接口。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>long</strong></p><ul><li><p>long 是 Java 原始类型。long 变量可以存储 64 位的带符号整数。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> number = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">long</span> anotherNumber = <span class="number">34590L</span>;</span><br><span class="line"><span class="keyword">long</span> octalNumber = <span class="number">0377</span>;</span><br><span class="line"><span class="keyword">long</span> hexNumber = <span class="number">0xffl</span>;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line">Long 类是 <span class="keyword">long</span> 原始类型的包装对象类。它定义代表此类型的值的范围的 MIN_VALUE 和 MAX_VALUE 常量。Java 中的所有整数值都是 <span class="number">32</span> 位的 <span class="keyword">int</span> 值，除非值后面有 l 或 L（如 <span class="number">235L</span>），这表示该值应解释为 <span class="keyword">long</span>。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>native</strong></p><ul><li><p>native 关键字可以应用于方法，以指示该方法是用 Java 以外的语言实现的。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">native</span> String <span class="title">getProcessorType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line">Native 方法不在此文档的讨论范围内。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>new</strong></p><ul><li><p>new 关键字用于创建类的新实例。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String sName = <span class="keyword">new</span> String();</span><br><span class="line"></span><br><span class="line">Float fVal = <span class="keyword">new</span> Float(<span class="number">0.15</span>);</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line"><span class="keyword">new</span> 关键字后面的参数必须是类名，并且类名的后面必须是一组构造方法参数（必须带括号）。参数集合必须与类的构造方法的签名匹配。= 左侧的变量的类型必须与要实例化的类或接口具有赋值兼容关系。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>null</strong></p><ul><li><p>null 是 Java 的保留字，表示无值。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Integer i;</span><br><span class="line"></span><br><span class="line">i = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">String s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (s != <span class="keyword">null</span>) &#123;</span><br><span class="line">&lt;statements&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line">将 <span class="keyword">null</span> 赋给非原始变量相当于释放该变量先前所引用的对象。不能将 <span class="keyword">null</span> 赋给原始类型 （<span class="keyword">byte</span>、<span class="keyword">short</span>、<span class="keyword">int</span>、<span class="keyword">long</span>、<span class="keyword">char</span>、<span class="keyword">float</span>、<span class="keyword">double</span>、<span class="keyword">boolean</span>）变量。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>package</strong></p><ul><li><p>package 关键字指定在 Java 源文件中声明的类所驻留的 Java 包。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mycompany;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line"><span class="keyword">package</span> 语句（如果出现）必须是 Java 源文件中的第一个非-注释-性文本。在上面的-示例-中，MyClass 类的完全限定类名是 com.mycompany.MyClass。如果 Java 源文件不包含 <span class="keyword">package</span> 语句，在该文件中定义的类将位于“默认包”中。请注意，不能从非默认包中的类引用默认包中的类。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>private</strong></p><ul><li><p>private 关键字是访问控制修饰符，可以应用于类、方法或字段（在类中声明的变量）。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPublicClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPrivateClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">myMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&lt;statements&gt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line">只能在声明 <span class="keyword">private</span>（内部）类、方法或字段的类中引用这些类、方法或字段。在类的外部或者对于子类而言，它们是不可见的。所有类成员的默认访问范围都是 <span class="keyword">package</span> 访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>protected</strong></p><ul><li><p>protected 关键字是可以应用于类、方法或字段（在类中声明的变量）的访问控制修饰符。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPublicClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPrivateClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">myMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&lt;statements&gt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line">可以在声明 <span class="keyword">protected</span> 类、方法或字段的类、同一个包中的其他任何类以及任何子类（无论子类是在哪个包中声明的）中引用这些类、方法或字段。所有类成员的默认访问范围都是 <span class="keyword">package</span> 访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>public</strong></p><ul><li><p>public 关键字是可以应用于类、方法或字段（在类中声明的变量）的访问控制修饰符。</p></li><li><p>示例</p><ul><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPublicClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPrivateClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">myMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&lt;statements&gt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line">可能只会在其他任何类或包中引用 <span class="keyword">public</span> 类、方法或字段。所有类成员的默认访问范围都是 <span class="keyword">package</span> 访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><ul><li><p><strong>return</strong></p><ul><li><p>return 关键字会导致方法返回到调用它的方法，从而传递与返回方法的返回类型匹配的值。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myVoidMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&lt;statements&gt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">myStringMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String s = <span class="string">"myresponse"</span>;</span><br><span class="line">returns;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">myIntMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">return</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line"></span><br><span class="line">如果方法具有非 <span class="keyword">void</span> 的返回类型，<span class="keyword">return</span> 语句必须具有相同或兼容类型的参数。返回值两侧的括号是可选的。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>short</strong></p><ul><li><p>short 是 Java 原始类型。short 变量可以存储 16 位带符号的整数。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> number = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">short</span> octalNumber = <span class="number">0077</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">short</span> hexNumber = <span class="number">0xff</span>;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line">Short 类是 <span class="keyword">short</span> 原始类型的包装对象类。它定义代表此类型的值的范围的 MIN_VALUE 和 MAX_VALUE 常量。Java 中的所有整数值都是 <span class="number">32</span> 位的 <span class="keyword">int</span> 值，除非值后面有 l 或 L（如 <span class="number">235L</span>），这表示该值应解释为 <span class="keyword">long</span>。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>static</strong></p><ul><li><p>static 关键字可以应用于内部类（在另一个类中定义的类）、方法或字段（类的成员变量）。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPublicClass</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_OBJECTS = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">static</span> int_numObjects = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStaticClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getNumObjects</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line"></span><br><span class="line">通常，<span class="keyword">static</span> 关键字意味着应用它的实体在声明该实体的类的任何特定实例外部可用。<span class="keyword">static</span>（内部）类可以被其他类实例化和引用（即使它是顶级类）。在上面的-示例-中，另一个类中的代码可以实例化 MyStaticClass 类，方法是用包含它的类名来限定其名称，如 MyClass.MyStaticClass。<span class="keyword">static</span> 字段（类的成员变量）在类的所有实例中只存在一次。可以从类的外部调用 <span class="keyword">static</span> 方法，而不用首先实例化该类。这样的引用始终包括类名作为方法调用的限定符。在上面的示例中，MyClass 类外部的代码以MyClass.getNumObjects() 的形式调用 getNumObjects()<span class="keyword">static</span> 方法。模式：</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> &lt;type&gt;varName = &lt;value&gt;;</span><br><span class="line"></span><br><span class="line">通常用于声明可以在类的外部使用的类常量。在引用这样的类常量时需要用类名加以限定。在上面的-示例-中，另一个类可以用 MyClass.MAX_OBJECTS 形式来引用 MAX_OBJECTS 常量。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>super</strong></p><ul><li><p>super 关键字用于引用使用该关键字的类的超类。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyClass</span><span class="params">(Stringarg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">myStringMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="function">other String <span class="title">Method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line">作为独立语句出现的 <span class="keyword">super</span> 表示调用超类的构造方法。<span class="keyword">super</span>.&lt;methodName&gt;() 表示调用超类的方法。只有在如下情况中才需要采用这种用法：要调用在该类中被重写的方法，以便指定应当调用在超类中的该方法。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>switch</strong></p><ul><li><p>switch 语句用于基于某个表达式选择执行多个代码块中的某一个。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arg = &lt;some value&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(arg) &#123;</span><br><span class="line">case1:</span><br><span class="line">&lt;statements&gt;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">case2:</span><br><span class="line">&lt;statements&gt;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&lt;statements&gt;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> arg = &lt;some value&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(arg) &#123;</span><br><span class="line"><span class="keyword">case</span><span class="string">'y'</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span><span class="string">'Y'</span>:</span><br><span class="line">&lt;statements&gt;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span><span class="string">'n'</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span><span class="string">'N'</span>:</span><br><span class="line">&lt;statements&gt;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&lt;statements&gt;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line"><span class="keyword">switch</span> 条件的计算结果必须等于 <span class="keyword">byte</span>、<span class="keyword">char</span>、<span class="keyword">short</span> 或 <span class="keyword">int</span>，jdk1.7 后可以是 String 类型。<span class="keyword">case</span> 块没有隐式结束点。<span class="keyword">break</span> 语句通常在每个 <span class="keyword">case</span> 块末尾使用，用于退出 <span class="keyword">switch</span> 语句。如果没有 <span class="keyword">break</span> 语句，执行流将进入所有后面的 <span class="keyword">case</span> 和 / 或 <span class="keyword">default</span> 块。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>synchronized</strong></p><ul><li><p>synchronized 关键字可以应用于方法或语句块，并为一次只应由一个线程执行的关键代码段提供保护。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> String <span class="title">mySyncStaticMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">mySyncMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyOtherClass</span> </span>&#123;</span><br><span class="line">Object someObj;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">myMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&lt;statements&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span>(someObj) &#123;</span><br><span class="line">&lt;statement saffectingsomeObj&gt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line"><span class="keyword">synchronized</span> 关键字可防止代码的关键代码段一次被多个线程执行。如果应用于静态方法（如上例中的 MySyncStaticMethod），那么，当该方法一次由一个线程执行时，整个类将被锁定。如果应用于实例方法（如上例中的 MySyncMethod ），那么，当该方法一次由一个线程访问时，该实例将被锁定。如果应用于对象或数组，当关联的代码块一次由一个线程执行时，对象或数组将被锁定。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>this</strong></p><ul><li><p>this 关键字用于引用当前实例。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyClass</span><span class="params">(intnumber)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.number = number;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line">当引用可能不明确时，可以使用 <span class="keyword">this</span> 关键字来引用当前的实例。在上面的-示例-中，构造方法参数number 与类的成员变量同名。<span class="keyword">this</span>.number 明确表示 MyClass 的该实例的 number 成员变量。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>throw</strong></p><ul><li><p>throw 关键字用于引发异常。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> method <span class="title">readFile</span><span class="params">(Stringfilename)</span><span class="keyword">throws</span> IO Exception </span>&#123;</span><br><span class="line">&lt;statements&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (error) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="function">IO <span class="title">Exception</span><span class="params">(<span class="string">"errorreadingfile"</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line"><span class="keyword">throw</span> 语句将 java.lang.Throwable 作为参数。Throwable 在调用栈中向上传播，直到被适当的 <span class="keyword">catch</span> 块捕获。引发非 RuntimeException 异常的任何方法还必须在方法声明中使用 <span class="keyword">throws</span> 修饰符来声明它引发的异常。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>throws</strong></p><ul><li><p>throws 关键字可以应用于方法，以便指出方法引发了特定类型的异常。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> method <span class="title">readFile</span><span class="params">(Stringfilename)</span>throwsIOException </span>&#123;</span><br><span class="line">&lt;statements&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (error) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="function">IO <span class="title">Exception</span><span class="params">(<span class="string">"errorreadingfile"</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line"><span class="keyword">throws</span> 关键字将逗号分隔的 java.lang.Throwables 列表作为参数。引发非 RuntimeException异 常的任何方法还必须在方法声明中使用 <span class="keyword">throws</span> 修饰符来声明它引发的异常。要在 <span class="keyword">try</span>-<span class="keyword">catch</span> 块中包含带 <span class="keyword">throws</span> 子句的方法的调用，必须提供该方法的调用者。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>transient</strong></p><ul><li><p>transient 关键字可以应用于类的成员变量，以便指出该成员变量不应在包含它的类实例已序列化时被序列化。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>try</strong></p><ul><li><p>try 关键字用于包含可能引发异常的语句块。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">&lt;可能引发异常的块&gt;</span><br><span class="line">&#125; <span class="keyword">catch</span> (&lt;java.lang.Exception或子类&gt;e) &#123;</span><br><span class="line">&lt;处理异常e的代码&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">&lt;可能引发其他异常的块&gt;</span><br><span class="line">&#125; <span class="keyword">catch</span> (FooExceptione) &#123;</span><br><span class="line">&lt;处理FooExceptione的代码&gt;</span><br><span class="line">&#125; <span class="keyword">catch</span> (BarExceptione) &#123;</span><br><span class="line">&lt;处理BarExceptione的代码&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">&lt;可能引发异常的块&gt;</span><br><span class="line">&#125; <span class="keyword">catch</span> (&lt;java.lang.Exception或子类&gt;e) &#123;</span><br><span class="line">&lt;处理异常e的代码&gt;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">&lt;有异常或无异常情况下都执行的语句&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line">每个 <span class="keyword">try</span> 块都必须至少有一个 <span class="keyword">catch</span> 或 <span class="keyword">finally</span> 子句。如果某个特定异常类未被任何 <span class="keyword">catch</span> 子句处理，该异常将沿着调用栈递归地传播到下一个封闭 <span class="keyword">try</span> 块。如果任何封闭 <span class="keyword">try</span> 块都未捕获到异常，Java 解释器将退出，并显示错误消息和堆栈跟踪信息。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>true</strong></p><ul><li><p>true 关键字表示 boolean 变量的两个合法值中的一个。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> Complete = <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>void</strong></p><ul><li><p>void 关键字表示 null 类型。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">do</span> <span class="title">Something</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&lt;statements&gt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line"><span class="keyword">void</span> 可以用作方法的返回类型，以指示该方法不返回值。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>volatile</strong></p><ul><li><p>volatile 关键字用于表示可以被多个线程异步修改的成员变量。</p><p>注意：volatile 关键字在许多 Java 虚拟机中都没有实现。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">int</span> shared Value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-注释-</span><br><span class="line"><span class="keyword">volatile</span> 的目标用途是为了确保所有线程所看到的指定变量的值都是相同的。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>while</strong></p><ul><li><p>while 关键字用于指定一个只要条件为真就会重复的循环。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (!found) &#123;</span><br><span class="line">&lt;statements&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;Java-关键字&quot;&gt;&lt;a href=&quot;#Java-关键字&quot; class=&quot;headerlink&quot; title=&quot;Java 关键字&quot;&gt;&lt;/a&gt;Java 关键字&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;概念：Java 关键字是对 Java 编译器有特殊含义的字符串，是编译器和
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="关键字" scheme="http://yoursite.com/categories/Java/%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
    
      <category term="java 关键字" scheme="http://yoursite.com/tags/java-%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
  </entry>
  
  <entry>
    <title>Java 正则表达式整理</title>
    <link href="http://yoursite.com/2019/09/28/Java%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2019/09/28/Java 正则表达式整理/</id>
    <published>2019-09-28T15:25:18.000Z</published>
    <updated>2019-09-29T09:31:52.024Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Java-正则表达式"><a href="#Java-正则表达式" class="headerlink" title="Java 正则表达式"></a>Java 正则表达式</h4><h5 id="Java-正则表达式简单介绍"><a href="#Java-正则表达式简单介绍" class="headerlink" title="Java 正则表达式简单介绍"></a>Java 正则表达式简单介绍</h5><ol><li><p>英文句点符号：匹配单个任意字符。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">eg:</span> 表达式：t.o  可以匹配：tno，t<span class="meta">#o，teo 等等。不可以匹配：tnno，to，Tno，t 正 o 等。</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>方括号：只有方括号里面指定的字符才参与匹配，也只能匹配单个字符。 </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">e</span><span class="variable">g:</span> 表达式：t[abcd]n  只可以匹配：<span class="built_in">tan</span>，tbn，tcn，tdn。不可以匹配：thn，<span class="keyword">tabn</span>，<span class="keyword">tn</span> 等。</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>| 符号。相当与“或”，可以匹配指定的字符，但是也只能选择其中一项进行匹配。</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eg：</span><br><span class="line">表达式：t(a|<span class="type">b</span>|<span class="type">c</span>|<span class="type">dd</span>)n 只可以匹配：tan，tbn，tcn，tddn。不可以匹配taan，tn，tabcn</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>表示匹配次数的符号</p><table><thead><tr><th align="center">符号</th><th align="left">次数</th></tr></thead><tbody><tr><td align="center">*</td><td align="left">0 次或者多次</td></tr><tr><td align="center">+</td><td align="left">1 次或者多次</td></tr><tr><td align="center">?</td><td align="left">0 次或者 1 次</td></tr><tr><td align="center">{n}</td><td align="left">恰好 n 次</td></tr><tr><td align="center">{m, n}</td><td align="left">从 m 到 n 次</td></tr></tbody></table><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;n， &#125; 表示至少 N 次。</span><br><span class="line"></span><br><span class="line">eg：</span><br><span class="line">表达式：[<span class="number">0</span>—<span class="number">9</span>]&#123; <span class="number">3</span> &#125;  \— [<span class="number">0</span><span class="number">-9</span>]&#123; <span class="number">2</span> &#125;  \— [<span class="number">0</span><span class="number">-9</span>]&#123; <span class="number">3</span> &#125; 的匹配格式为：<span class="number">999</span>—<span class="number">99</span>—<span class="number">999</span></span><br><span class="line">因为 “—” 符号在正则表达式中有特殊的含义，它表示一个范围，所以在前面加转义字符 “\”。</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>^ 符号：表示否</p><p>^ 符号被称为 “否” 符号，如果用在方括号内，”^” 表示不想匹配的字符。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eg：</span><br><span class="line">表达式：[^<span class="keyword">x</span>] 第一个字符不能是 <span class="keyword">x</span></span><br></pre></td></tr></table></figure></li></ol><ol start="6"><li><p>圆括号，和空白符号</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">“<span class="string">\s”</span> 是空白符号，只可以匹配一个空格、制表符、回车符、换页符，不可以匹配自己输入的多个空格。</span><br><span class="line">（）是分组号，可以用 ORO API 提取处出值，后面将详细讨论。</span><br></pre></td></tr></table></figure></li></ol><ol start="7"><li><p>正则表达式的一些快捷符号</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">\d</span> 表示 [0—9]，  </span><br><span class="line"><span class="symbol">\D</span> 表示 [^0—9]，  </span><br><span class="line"><span class="symbol">\w</span> 表示 [0—9A—Z_a—z]，</span><br><span class="line"><span class="symbol">\W</span> 表示 [^0—9A—Z_a—z]，  </span><br><span class="line"><span class="symbol">\s</span> 表示 [<span class="symbol">\t</span><span class="symbol">\n</span><span class="symbol">\r</span><span class="symbol">\f</span>],   </span><br><span class="line"><span class="symbol">\S</span> 表示 [^<span class="symbol">\t</span><span class="symbol">\n</span><span class="symbol">\r</span><span class="symbol">\f</span>]</span><br></pre></td></tr></table></figure></li></ol><ol start="8"><li><p>一些常用的正则表达式：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Java：<span class="comment">(([a-z]|_)</span><span class="comment">(\\w*)</span>)&#123;<span class="number">6</span>,<span class="number">20</span>&#125; 匹配以字母或下划线开头，字母数字下划线结尾的字符串</span><br><span class="line">JavaScript：/^<span class="comment">(\-?)</span><span class="comment">(\d+)</span>$/ 匹配数字。/^\w+$/ 匹配字母数字下划线。</span><br><span class="line">.+ 一个或多个字符</span><br><span class="line">/<span class="number">0</span> 第一次匹配的字符串</span><br></pre></td></tr></table></figure></li></ol><ol start="9"><li><p>Java 类中使用正则表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">eg1：</span><br><span class="line">Pattern p = Pattern.compile(<span class="string">"t.n"</span>);</span><br><span class="line">Matcher m = p.matcher(“ton”);</span><br><span class="line"><span class="keyword">if</span>(m.matches())&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">eg2：<span class="keyword">boolean</span> bool = Pattern.matches (“t.n”,”ton”);</span><br><span class="line">如果一个正则表达式要重复利用，用第一种，如果只匹配一次，第二种是最佳选择。</span><br></pre></td></tr></table></figure></li></ol><ol start="10"><li><p>反斜线字符（‘\’）用于转义字符，同时还可以引用非转义字符（不包括非转义字母）</p><p>因此 ‘\’ 表示‘\’，‘{’ 表示{。  但是 ‘\y’ 就是错的，因为在不表示转义构造的 任何字母字符前 使用反斜线都是错误的。</p><p>根据 <a href="http://java.sun.com/docs/books/jls" target="_blank" rel="noopener">Java Language Specification</a> 的要求，Java 源代码的字符串中的反斜线被解释为 <a href="http://java.sun.com/docs/books/jls/third_edition/html/lexical.doc.html#100850" target="_blank" rel="noopener">Unicode 转义</a> 或其他<a href="http://java.sun.com/docs/books/jls/third_edition/html/lexical.doc.html#101089" target="_blank" rel="noopener">字符转义</a>。因此必须在字符串字面值中使用两个反斜线，表示正则表达式受到保护，不被 Java 字节码编译器解释。例如，当解释为正则表达式时，字符串字面值 “\b” 与单个退格字符匹配，而 “\b” 与单词边界匹配。字符串字面值 “(hello)“ 是非法的，将导致编译时错误；要与字符串 (hello) 匹配，必须使用字符串字面值 “\(hello\)”。 注意：”\b” 是一个字符而 “[\b]” 是两个字符</p></li></ol><ol start="11"><li><p>Pattern 类</p><ul><li><p>8 种模式：比如启用多行模式，启用 unix 模式等，</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eg  <span class="keyword">int</span> <span class="built_in">CASE_INSENSITIVE</span> 表示启用不区分大小写的模式。</span><br></pre></td></tr></table></figure></li></ul></li></ol><pre><code>- 4 个静态方法  两个单例模式构造器：  - Pattern compile（String regex）；  - Pattern compile（String regex, int flags）flags 为八种模式的一种    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">eg1：</span><br><span class="line">Pattern p = Pattern.compile(<span class="string">"[a-z]\\s[a-z]"</span>);</span><br><span class="line">Matcher m = p.matcher(<span class="string">"bc"</span>);</span><br><span class="line"><span class="keyword">if</span>(m.matches())</span><br><span class="line">Sysout(<span class="number">1111</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">Sysout(<span class="number">2222</span>);  输出结果为 <span class="number">1111</span>；</span><br><span class="line"></span><br><span class="line">一个匹配方法，一个返回 String 的字面值模式方法：</span><br><span class="line"><span class="comment">// input 与 regex 匹配返回 true。</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String regex,CharSequence input)</span></span>;</span><br><span class="line"><span class="function">String <span class="title">quote</span><span class="params">(String s)</span></span>; <span class="comment">// 返回指定 String 的字面值。</span></span><br><span class="line"></span><br><span class="line">eg2：</span><br><span class="line"><span class="keyword">boolean</span> bool = Pattern.matches(<span class="string">"[a-z] [a-z]"</span>,”b c”); <span class="comment">// 结果为 true</span></span><br><span class="line">Sysout(Pattern.quote(“a_#/tb”)); // 输出结果为 “\Qa_#b”\E</span><br></pre></td></tr></table></figure>  - 6 个普通方法    - 返回此模式的匹配器：Matcher  matcher（CharSequence input）;    - 返回此模式的标志：int flags（）;    - 返回此模式的 regex：String pattern（）;    - 两个字符串切割方法： String[] split(CharSequence input);      ​                                        String[] split(CharSequence input, int limit);  limit 为返回字符串的个数，如果等于 0，返回所有拆分的字符串，如果大于拆字符串的实际个数，返回实际个数    - toString 方法： String toString（）;      <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">eg4：</span><br><span class="line">Pattern p = Pattern.compile(<span class="string">"[,;\\s]"</span>);</span><br><span class="line">String str = <span class="string">"wo,ai;ni haha"</span>;</span><br><span class="line">String[] strs = p.split(str);</span><br><span class="line"><span class="keyword">for</span>(String s : strs)&#123;</span><br><span class="line">Sysout(s);<span class="comment">// 输出 “wo” “ai” “ni” “haha”</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">strs = p.split(str,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span>(String s : strs)&#123;</span><br><span class="line">Sysout(s); <span class="comment">// 输出 “wo” “ai;ni haha”</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Strs = p.split(str,<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span>(String s : strs)&#123;</span><br><span class="line">Sysout(s); <span class="comment">// 输出 “wo” “ai” “ni” “haha”</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h5 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h5><ul><li><p>“^\d+$”　　//非负整数（正整数 + 0）</p></li><li><p>“^[0-9]*[1-9][0-9]*$”　　//正整数</p></li><li><p>“^((-\d+)|(0+))$”　　//非正整数（负整数 + 0）</p></li><li><p>“^-[0-9]*[1-9][0-9]*$”　　//负整数</p></li><li><p>“^-?\d+$”　　　　//整数</p></li><li><p>“^\d+(.\d+)?$”　　//非负浮点数（正浮点数 + 0）</p></li><li><p>“^(([0-9]+.[0-9]*[1-9][0-9]<em>)|([0-9]</em>[1-9][0-9]<em>.[0-9]+)|([0-9]</em>[1-9][0-9]*))$”　　//正浮点数</p></li><li><p>“^((-\d+(.\d+)?)|(0+(.0+)?))$”　　//非正浮点数（负浮点数 + 0） </p></li><li><p>“^(-(([0-9]+.[0-9]*[1-9][0-9]<em>)|([0-9]</em>[1-9][0-9]<em>.[0-9]+)|([0-9]</em>[1-9][0-9]*)))$”　　//负浮点数</p></li><li><p>“^(-?\d+)(.\d+)?$”　　//浮点数</p></li><li><p>“^[A-Za-z]+$”　　//由26个英文字母组成的字符串</p></li><li><p>“^[A-Z]+$”　　//由26个英文字母的大写组成的字符串 </p></li><li><p>“^[a-z]+$”　　//由26个英文字母的小写组成的字符串</p></li><li><p>“^[A-Za-z0-9]+$”　　//由数字和26个英文字母组成的字符串</p></li><li><p>“^\w+$”　　//由数字、26个英文字母或者下划线组成的字符串</p></li><li><p>“^[\w-]+(.[\w-]+)<em>@[\w-]+(.[\w-]+)+$”　　　　//email地址</em></p></li><li><p>“^[a-zA-z]+://(\w+(-\w+)<em>)(.(\w+(-\w+)</em>))<em>(?\S</em>)?$”　　//url</p></li><li><p>/^(d{2}|d{4})-((0([1-9]{1}))|(1[1|2]))-((<a href="[1-9]{1}">0-2</a>)|(3[0|1]))$/   //  年-月-日 </p></li><li><p>/^((0([1-9]{1}))|(1[1|2]))/((<a href="[1-9]{1}">0-2</a>)|(3[0|1]))/(d{2}|d{4})$/   // 月/日/年</p></li><li><p>“^([w-.]+)@(([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.)|(([w-]+.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(]?)$”   //Emil</p></li><li><p>/^((+?[0-9]{2,4}-[0-9]{3,4}-)|([0-9]{3,4}-))?([0-9]{7,8})(-[0-9]+)?$/     //电话号码</p></li><li><p>“^(d{1,2}|1dd|2[0-4]d|25[0-5]).(d{1,2}|1dd|2[0-4]d|25[0-5]).(d{1,2}|1dd|2[0-4]d|25[0-5]).(d{1,2}|1dd|2[0-4]d|25[0-5])$”   //IP地址    </p></li><li><p>匹配中文字符的正则表达式： [\u4e00-\u9fa5]</p></li><li><p>匹配双字节字符(包括汉字在内)：[^\x00-\xff]</p></li><li><p>匹配空行的正则表达式：\n[\s| ]<em>\r</em></p></li><li><p>匹配HTML标记的正则表达式：/&lt;(.<em>)&gt;.</em>&lt;/\1&gt;|&lt;(.<em>) /&gt;/</em></p></li><li><p>匹配首尾空格的正则表达式：(^\s<em>)|(\s</em>$)</p></li><li><p>匹配 Email 地址的正则表达式：\w+([-+.]\w+)<em>@\w+([-.]\w+)</em>.\w+([-.]\w+)</p></li><li><p>匹配网址 URL 的正则表达式：^[a-zA-z]+://(\w+(-\w+)<em>)(\.(\w+(-\w+)</em>))<em>(\?\S</em>)?$</p></li><li><p>匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$</p></li><li><p>匹配国内电话号码：(\d{3}-|\d{4}-)?(\d{8}|\d{7})?</p></li><li><p>匹配腾讯 QQ 号：^[1-9]*[1-9][0-9]*$</p></li><li><p>元字符及其在正则表达式上下文中的行为：</p><ul><li><p>\ 将下一个字符标记为一个特殊字符、或一个原义字符、或一个后向引用、或一个八进制转义符。</p></li><li><p>^ 匹配输入字符串的开始位置。如果设置了 RegExp 对象的Multiline 属性，^ 也匹配 ’\n’ 或 ’\r’ 之后的位置。</p></li><li><p>$ 匹配输入字符串的结束位置。如果设置了 RegExp 对象的Multiline 属性，$ 也匹配 ’\n’ 或 ’\r’ 之前的位置。</p></li><li><p>*匹配前面的子表达式零次或多次。</p></li><li><p>+匹配前面的子表达式一次或多次。+ 等价于 {1,}。</p></li><li><p>? 匹配前面的子表达式零次或一次。? 等价于 {0,1}。</p></li><li><p>{n} n 是一个非负整数，匹配确定的 n 次。</p></li><li><p>{n,} n 是一个非负整数，至少匹配 n 次。</p></li><li><p>{n,m} m 和 n 均为非负整数，其中 n &lt;= m。最少匹配 n 次且最多匹配 m 次。在逗号和两个数之间不能有空格。</p></li><li><p>? 当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。</p></li><li><p>. 匹配除 “\n” 之外的任何单个字符。要匹配包括 ’\n’ 在内的任何字符，请使用象 ’[.\n]’ 的模式。</p></li><li><p>(pattern) 匹配 pattern 并获取这一匹配。</p></li><li><p>(?:pattern) 匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。</p></li><li><p>(?=pattern) 正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。</p></li><li><p>(?!pattern) 负向预查，与 (?=pattern) 作用相反</p></li><li><p>x|y 匹配 x 或 y。 </p></li><li><p>[xyz] 字符集合。 </p></li><li><p>[^xyz] 负值字符集合。</p></li><li><p>[a-z] 字符范围，匹配指定范围内的任意字符。 </p></li><li><p>[^a-z] 负值字符范围，匹配任何不在指定范围内的任意字符。</p></li><li><p>\b 匹配一个单词边界，也就是指单词和空格间的位置。</p></li><li><p>\B 匹配非单词边界。</p></li><li><p>\cx 匹配由x指明的控制字符。</p></li><li><p>\d 匹配一个数字字符。等价于 [0-9]。</p></li><li><p>\D 匹配一个非数字字符。等价于[^0-9]。  </p></li><li><p>\f 匹配一个换页符。等价于 \x0c 和 \cL。</p></li><li><p>\n 匹配一个换行符。等价于 \x0a 和 \cJ。</p></li><li><p>\r 匹配一个回车符。等价于 \x0d 和 \cM。</p></li><li><p>\s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]。</p></li><li><p>\S 匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。 </p></li><li><p>\t 匹配一个制表符。等价于 \x09 和 \cI。</p></li><li><p>\v 匹配一个垂直制表符。等价于 \x0b 和 \cK。</p></li><li><p>\w 匹配包括下划线的任何单词字符。等价于’[A-Za-z0-9_]’。_</p></li><li><p>\W 匹配任何非单词字符。等价于 [^A-Za-z0-9_]。</p></li><li><p>\xn 匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。</p></li><li><p>\num 匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。</p></li><li><p>\n 标识一个八进制转义值或一个后向引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为后向引用。否则，如果 n 为八进制数字 ( 0-7 )，则 n 为一个八进制转义值。</p></li><li><p>\nm 标识一个八进制转义值或一个后向引用。如果 \nm 之前至少有 is preceded by at least nm 个获取得子表达式，则 nm 为后向引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的后向引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字  ( 0-7 )，则 \nm 将匹配八进制转义值 nm。</p></li><li><p>\nml 如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</p></li><li><p>\un 匹配 n，其中 n 是一个用四个十六进制数字表示的Unicode字符。</p></li><li><p>匹配中文字符的正则表达式： [u4e00-u9fa5]</p></li><li><p>匹配双字节字符(包括汉字在内)：[^x00-xff]</p></li><li><p>匹配空行的正则表达式：n[s| ]<em>r</em></p></li><li><p>匹配HTML标记的正则表达式：/&lt;(.<em>)&gt;.</em>&lt;/1&gt;|&lt;(.<em>) /&gt;/</em></p></li><li><p>匹配首尾空格的正则表达式：(^s<em>)|(s</em>$)</p></li><li><p>匹配Email地址的正则表达式：w+([-+.]w+)<em>@w+([-.]w+)</em>.w+([-.]w+)</p></li><li><p>匹配网址URL的正则表达式：http://([w-]+.)+[w-]+(/[w- ./?%&amp;=]*)?</p></li></ul></li></ul><h5 id="利用正则表达式限制网页表单里的文本框输入内容："><a href="#利用正则表达式限制网页表单里的文本框输入内容：" class="headerlink" title="利用正则表达式限制网页表单里的文本框输入内容："></a>利用正则表达式限制网页表单里的文本框输入内容：</h5><ol><li>用正则表达式限制只能输入中文：onkeyup=”value=value.replace(/[^u4E00-u9FA5]/g,’’)” onbeforepaste=”clipboardData.setData(‘text’,clipboardData.getData(‘text’).replace(/[^u4E00-u9FA5]/g,’’))”</li><li>用正则表达式限制只能输入全角字符： onkeyup=”value=value.replace(/[^uFF00-uFFFF]/g,’’)” onbeforepaste=”clipboardData.setData(‘text’,clipboardData.getData(‘text’).replace(/[^uFF00-uFFFF]/g,’’))”</li><li>用正则表达式限制只能输入数字：onkeyup=”value=value.replace(/[^d]/g,’’) “onbeforepaste=”clipboardData.setData(‘text’,clipboardData.getData(‘text’).replace(/[^d]/g,’’))”</li><li>用正则表达式限制只能输入数字和英文：onkeyup=”value=value.replace(/[W]/g,’’) “onbeforepaste=”clipboardData.setData(‘text’,clipboardData.getData(‘text’).replace(/[^d]/g,’’))”</li></ol><h5 id="整理："><a href="#整理：" class="headerlink" title="整理："></a>整理：</h5><ol><li>匹配中文字符的正则表达式： [\u4e00-\u9fa5]</li><li>匹配双字节字符 ( 包括汉字在内 ) ：[^\x00-\xff]</li><li>匹配空行的正则表达式：\n[\s| ]<em>\r</em></li><li>匹配 HTML 标记的正则表达式：/&lt;(.<em>)&gt;.</em>&lt;/\1&gt;|&lt;(.<em>) /&gt;/</em></li><li>匹配首尾空格的正则表达式：(^\s<em>)|(\s</em>$)</li><li>匹配 IP 地址的正则表达式：/(\d+).(\d+).(\d+).(\d+)/g //</li><li>匹配 Email 地址的正则表达式：\w+([-+.]\w+)<em>@\w+([-.]\w+)</em>.\w+([-.]\w+)</li><li>匹配网址 URL 的正则表达式：http://(/[\w-]+.)+[\w-]+(/[\w- ./?%&amp;=]<em>)?</em></li><li>SQL 语句：^(select|drop|delete|create|update|insert).*$</li><li>非负整数：^\d+$</li><li>正整数：^[0-9]*[1-9][0-9]*$</li><li>非正整数：^((-\d+)|(0+))$</li><li>负整数：^-[0-9]*[1-9][0-9]*$</li><li>整数：^-?\d+$</li><li>非负浮点数：^\d+(.\d+)?$</li><li>正浮点数：^((0-9)+.[0-9]*[1-9][0-9]<em>)|([0-9]</em>[1-9][0-9]<em>.[0-9]+)|([0-9]</em>[1-9][0-9]*))$</li><li>非正浮点数：^((-\d+.\d+)?)|(0+(.0+)?))$</li><li>负浮点数：^(-((正浮点数正则式)))$</li><li>英文字符串：^[A-Za-z]+$</li><li>英文大写串：^[A-Z]+$</li><li>英文小写串：^[a-z]+$</li><li>英文字符数字串：^[A-Za-z0-9]+$</li><li>英数字加下划线串：^\w+$</li><li>E-mail 地址：^[\w-]+(.[\w-]+)<em>@[\w-]+(.[\w-]+)+$</em></li><li>URL：^[a-zA-Z]+://(\w+(-\w+)<em>)(.(\w+(-\w+)</em>))<em>(?\s</em>)?$ 或 ^http://[A-Za-z0-9]+.[A-Za-z0-9]+[/=?%-&amp;_~`@[]&#39;:+!]<em>([^&lt;&gt;&quot;&quot;])</em>$</li><li>邮政编码：^[1-9]\d{5}$</li><li>中文：^[\u0391-\uFFE5]+$</li><li>电话号码：^(((\d{2,3}))|(\d{3}-))?((0\d{2,3})|0\d{2,3}-)?[1-9]\d{6,7}(-\d{1,4})?$</li><li>手机号码：^(((\d{2,3}))|(\d{3}-))?13\d{9}$</li><li>双字节字符(包括汉字在内)：^\x00-\xff</li><li>匹配首尾空格：(^\s<em>)|(\s</em>$)（像vbscript那样的trim函数）</li><li>匹配 HTML 标记：&lt;(.<em>)&gt;.</em>&lt;/\1&gt;|&lt;(.<em>) /&gt;</em></li><li>匹配空行：\n[\s| ]*\r</li><li>提取信息中的网络链接：(h|H)(r|R)(e|E)(f|F) <em>= *(‘|”)?(\w|\|/|.)+(‘|”| *|&gt;)?</em></li><li>提取信息中的邮件地址：\w+([-+.]\w+)<em>@\w+([-.]\w+)</em>.\w+([-.]\w+)*</li><li>提取信息中的图片链接：(s|S)(r|R)(c|C) *= *(‘|”)?(\w|\|/|.)+(‘|”| *|&gt;)?</li><li>提取信息中的 IP 地址：(\d+).(\d+).(\d+).(\d+)</li><li>提取信息中的中国手机号码：(86)<em>0</em>13\d{9}</li><li>提取信息中的中国固定电话号码：((\d{3,4})|\d{3,4}-|\s)?\d{8}</li><li>提取信息中的中国电话号码（包括移动和固定电话）：((\d{3,4})|\d{3,4}-|\s)?\d{7,14}</li><li>提取信息中的中国邮政编码：[1-9]{1}(\d+){5}</li><li>提取信息中的浮点数（ 即小数 ）：(-?\d<em>).?\d+</em></li><li>提取信息中的任何数字 ：(-?\d*)(.\d+)?</li><li>IP ：(\d+).(\d+).(\d+).(\d+)</li><li>电话区号：/^0\d{2,3}$/</li><li>腾讯 QQ 号：^[1-9]*[1-9][0-9]*$</li><li>帐号 ( 字母开头，允许 5-16 字节，允许字母数字下划线 ) ：^[a-zA-Z][a-zA-Z0-9_]{4,15}$</li><li>中文、英文、数字及下划线：^[\u4e00-\u9fa5_a-zA-Z0-9]+$</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Java-正则表达式&quot;&gt;&lt;a href=&quot;#Java-正则表达式&quot; class=&quot;headerlink&quot; title=&quot;Java 正则表达式&quot;&gt;&lt;/a&gt;Java 正则表达式&lt;/h4&gt;&lt;h5 id=&quot;Java-正则表达式简单介绍&quot;&gt;&lt;a href=&quot;#Java-正则
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="正则表达式" scheme="http://yoursite.com/categories/Java/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="整理" scheme="http://yoursite.com/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Python 函数</title>
    <link href="http://yoursite.com/2019/08/22/Python%20%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2019/08/22/Python 函数/</id>
    <published>2019-08-22T12:41:31.000Z</published>
    <updated>2019-08-22T12:43:17.036Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>定义：函数定义使⽤ def 关键字，函数命名全部⼩写，可由下划线连接各个单词，一般格式如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名（参数列表):</span> </span><br><span class="line">    函数体</span><br><span class="line"></span><br><span class="line">eg：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(x, y)</span>:</span>    <span class="comment"># 定义一个函数名为hello的函数，有两个参数：x 和 y</span></span><br><span class="line">    print(‘hello’)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hello()             <span class="comment"># 调用函数</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>参数</p><ul><li><p>必传参数：必须以正确的顺序传⼊参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">hello1</span><span class="params">(x, y)</span>:</span>        <span class="comment"># 定义一个函数名为hello1的函数，有两个参数 x 和 y</span></span><br><span class="line">    print(x, y)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hello1(<span class="string">'必传'</span>, <span class="string">'参数'</span>)</span><br><span class="line">必传 参数</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>默认参数：给参数添加默认值，默认参数可不传。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">hello2</span><span class="params">(x, y, z=<span class="number">8</span>, name=<span class="string">'simplation'</span>)</span>:</span>  <span class="comment"># 定义一个含有四个参数的函数，其中两个是有默认参数的</span></span><br><span class="line">    print(x, y, z, name)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hello2(<span class="number">666</span>, <span class="number">999</span>)                           <span class="comment"># 不传入默认参数，会直接将原来的参数打印出来</span></span><br><span class="line"><span class="number">666</span> <span class="number">999</span> <span class="number">8</span> simplation</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hello2(<span class="number">666</span>, <span class="number">999</span>, <span class="number">888</span>)                      <span class="comment"># 传递默认参数，会将新的参数打印出来</span></span><br><span class="line"><span class="number">666</span> <span class="number">999</span> <span class="number">888</span> simplation</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hello2(<span class="number">666</span>, <span class="number">999</span>, <span class="number">888</span>, <span class="string">'Simplation’)          </span></span><br><span class="line"><span class="string">666 999 888 Simplation</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; hello2(666, 999, name='</span>sim’)               <span class="comment"># 不按顺序提供默认参数</span></span><br><span class="line"><span class="number">666</span> <span class="number">999</span> <span class="number">8</span> sim</span><br></pre></td></tr></table></figure><ul><li>注意：<ul><li>必传参数必须在前，默认参数在后，否则 Python 解释器会报错； </li><li>不按顺序提供默认参数，需要把参数名写上；</li></ul></li></ul></li></ul><ul><li><p>可变参数：参数个数不定，在参数前⾯加了⼀个 * 号，可变参数接收到的是⼀个 tuple，这样传⼊的参数个数是可变的，可以是 1 个、2 个、任意个，还可以是 0 个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">hello3</span><span class="params">(*y)</span>:</span>                    <span class="comment"># 定义一个含有可变参数y的函数</span></span><br><span class="line">    print(y)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hello3(<span class="number">1</span>, <span class="string">'2'</span>, <span class="number">3</span>, <span class="literal">True</span>)            </span><br><span class="line">(<span class="number">1</span>, <span class="string">'2'</span>, <span class="number">3</span>, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hello3(<span class="string">'Simplation'</span>)</span><br><span class="line">(<span class="string">'Simplation’,)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; hello3()</span></span><br><span class="line"><span class="string">()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; def hello4(x, *y):                 # 定义一个含有一个参数和可变参数的函数</span></span><br><span class="line"><span class="string">    print(x, y)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; hello4(1, '</span><span class="number">2</span><span class="string">', 3.0, True)</span></span><br><span class="line"><span class="string">1 ('</span><span class="number">2</span><span class="string">', 3.0, True)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; hello4('</span>Simplation<span class="string">')</span></span><br><span class="line"><span class="string">Simplation ()</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>关键字参数：与可变参数类似，关键字参数个数不定，在参数前⾯加了⼀个 ** 号，关键字参数接收到的是⼀个 dict。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">hello5</span><span class="params">(x, **y)</span>:</span>        <span class="comment"># 定义一个含有关键字参数的函数</span></span><br><span class="line">    print(x, y)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hello5(<span class="number">1024</span>)               <span class="comment"># 调用</span></span><br><span class="line"><span class="number">1024</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hello5(<span class="number">1024</span>, name=<span class="string">'simplation'</span>, code=<span class="number">520</span>)</span><br><span class="line"><span class="number">1024</span> &#123;<span class="string">'name'</span>: <span class="string">'simplation'</span>, <span class="string">'code'</span>: <span class="number">520</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>返回值：使⽤ return 语句，可以将函数作为⼀个值赋值给指定变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">hello6</span><span class="params">(x)</span>:</span>            <span class="comment"># 定义一个含有返回值的函数</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hello6(<span class="string">'python’)          # 调用</span></span><br><span class="line"><span class="string">‘python'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">hello7</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x, y </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = hello7(<span class="number">666</span>, <span class="number">999</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(m) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(type(m), m) <span class="comment"># 打印： (666, 999)</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>全局变量和局部变量</p><p>在函数⾥给⼀个变量赋值的时候，Python ⾃动认为这个变量是这个作⽤域的本地变量，并屏蔽作⽤域外的同名的变量，可以声明 global，表示在向⼀个全局变量赋值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局变量 </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z = <span class="number">1024</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">hello8</span><span class="params">()</span>:</span> </span><br><span class="line">        globals z </span><br><span class="line">        z = <span class="number">520</span> </span><br><span class="line">        print(<span class="string">'z='</span> + str(z)) <span class="comment"># z=520 </span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hello8()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;定义：函数定义使⽤ def 关键字，函数命名全部⼩写，可由下划线连接各个单词，一般格式如下&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span clas
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="函数" scheme="http://yoursite.com/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python 关键字整理</title>
    <link href="http://yoursite.com/2019/08/22/Python%20%E5%85%B3%E9%94%AE%E5%AD%97%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2019/08/22/Python 关键字整理/</id>
    <published>2019-08-22T12:34:55.000Z</published>
    <updated>2019-08-22T12:43:17.035Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Python-关键字"><a href="#Python-关键字" class="headerlink" title="Python 关键字"></a>Python 关键字</h5><ul><li><p>查看所有关键字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line"></span><br><span class="line">keyword.kwlist</span><br><span class="line"></span><br><span class="line">result:[<span class="string">'False'</span>, <span class="string">'None'</span>, <span class="string">'True'</span>, <span class="string">'and'</span>, <span class="string">'as'</span>, <span class="string">'assert'</span>, <span class="string">'async'</span>, <span class="string">'await'</span>, <span class="string">'break'</span>, <span class="string">'class'</span>, <span class="string">'continue'</span>, <span class="string">'def'</span>, <span class="string">'del'</span>, <span class="string">'elif'</span>, <span class="string">'else'</span>, <span class="string">'except'</span>, <span class="string">'finally'</span>, <span class="string">'for'</span>, <span class="string">'from'</span>, <span class="string">'global'</span>, <span class="string">'if'</span>, <span class="string">'import'</span>, <span class="string">'in'</span>, <span class="string">'is'</span>, <span class="string">'lambda'</span>, <span class="string">'nonlocal'</span>, <span class="string">'not'</span>, <span class="string">'or'</span>, <span class="string">'pass'</span>, <span class="string">'raise'</span>, <span class="string">'return'</span>, <span class="string">'try'</span>, <span class="string">'while'</span>, <span class="string">'with'</span>, <span class="string">'yield'</span>]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>关键字整理</p><table><thead><tr><th>关键字</th><th>含义</th></tr></thead><tbody><tr><td>False</td><td>布尔属性值，一般是判断检测的属性，False 表示为假</td></tr><tr><td>None</td><td>一个特殊的常量，和任何其他的数据类型比较永远返回 False，None 有自己的数据类型NoneType，并且这个类型中永远只会有它一个。如果一个函数没有返回值，那解释器就默认它的返回值是None.</td></tr><tr><td>True</td><td>布尔属性值，一般是判断检测的属性，True 表示为真</td></tr><tr><td>and</td><td>表示逻辑‘与’</td></tr><tr><td>as</td><td>单独没有意思，with….as 用来代替传统的 try…finally 语法的</td></tr><tr><td>assert</td><td>表示断言，用于声明某个条件为真，如果该条件不是真的，则抛出异常：AssertionError</td></tr><tr><td>async</td><td></td></tr><tr><td>await</td><td></td></tr><tr><td>break</td><td>终止循环</td></tr><tr><td>class</td><td>定义类</td></tr><tr><td>continue</td><td>跳过 continue 后面循环块中的语句，继续进行下一轮循环</td></tr><tr><td>def</td><td>定义方法</td></tr><tr><td>del</td><td>用于 list 列表操作，删除一个或者连续几个元素</td></tr><tr><td>elif</td><td>和 if 配合使用的，if 语句中的一个分支用 elif 或者 else 表示</td></tr><tr><td>else</td><td>和 if 配合使用的，if 语句中的一个分支用 elif 或者 else 表示</td></tr><tr><td>except</td><td>和 try 一起使用，用来捕获异常</td></tr><tr><td>finally</td><td>出现在异常处理中，使用格式为：try…except…finally…，try 中放想要执行的语句，except 捕获异常，finally 做一些后续的工作</td></tr><tr><td>for</td><td>for….in 一起使用：它在一序列的对象上递归，就是遍历队列中的每一项</td></tr><tr><td>from</td><td>导入相应的模块，用 import 或者 from…import</td></tr><tr><td>global</td><td>定义全局变量</td></tr><tr><td>if</td><td>if 语句用于选择分支，和 else、elif 一起使用</td></tr><tr><td>import</td><td>导入相应的模块，用 import 或者 from…import</td></tr><tr><td>in</td><td>查找列表中是否包含某个元素</td></tr><tr><td>is</td><td>Python 中的对象包含三要素：id、type、value（id 用来唯一标识一个对象，type 标识对象的类型，value 是对象的值），is 判断的是 a 对象是否就是 b 对象，是通过 id 来判断的，== 判断的是 a 对象的值是否和 b 对象的值相等，是通过 value 来判断的</td></tr><tr><td>lambda</td><td>匿名函数，不用想给函数起什么名字。提升了代码的简洁程度</td></tr><tr><td>nonlocal</td><td>nonlocal 在嵌套函数中使用，用于标识嵌套函数中的变量是包含该嵌套函数的函数中的同名变量，在嵌套函数中修改变量会影响函数中的变量。</td></tr><tr><td>not</td><td>表示逻辑‘非’</td></tr><tr><td>or</td><td>表示逻辑“或”</td></tr><tr><td>pass</td><td>pass 的意思就是什么都不做</td></tr><tr><td>raise</td><td>raise 可以显示地引发异常。一旦执行 raise 语句，后面的代码就不执行了</td></tr><tr><td>return</td><td>用于跳出函数，也可以在跳出的同时返回一个值</td></tr><tr><td>try</td><td>出现在异常处理中，使用格式为：try…except，try 中放想要执行的语句，except 捕获异常</td></tr><tr><td>while</td><td>while 循环，允许重复执行一块语句，一般无限循环的情况下用它</td></tr><tr><td>with</td><td>用法和  as 一样，和 as 一起使用</td></tr><tr><td>yield</td><td>用起来和 return 很像，但它返回的是一个生成器。我这样说不是很生动</td></tr></tbody></table></li></ul><ul><li>使用介绍</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;Python-关键字&quot;&gt;&lt;a href=&quot;#Python-关键字&quot; class=&quot;headerlink&quot; title=&quot;Python 关键字&quot;&gt;&lt;/a&gt;Python 关键字&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;查看所有关键字&lt;/p&gt;
&lt;figure class=&quot;hi
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="关键字" scheme="http://yoursite.com/tags/%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
  </entry>
  
  <entry>
    <title>iOS 错误整理</title>
    <link href="http://yoursite.com/2019/07/16/iOS%20%E9%94%99%E8%AF%AF%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2019/07/16/iOS 错误整理/</id>
    <published>2019-07-16T12:00:25.000Z</published>
    <updated>2019-07-17T11:28:36.108Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-App-Transport-Security-has-blocked-a-cleartext-HTTP-http-resource-load-since-it-is-insecure-Temporary-exceptions-can-be-configured-via-your-app’s-Info-plist-file"><a href="#1-App-Transport-Security-has-blocked-a-cleartext-HTTP-http-resource-load-since-it-is-insecure-Temporary-exceptions-can-be-configured-via-your-app’s-Info-plist-file" class="headerlink" title="1. App Transport Security has blocked a cleartext HTTP (http://) resource load since it is insecure. Temporary exceptions can be configured via your app’s Info.plist file."></a>1. App Transport Security has blocked a cleartext HTTP (http://) resource load since it is insecure. Temporary exceptions can be configured via your app’s Info.plist file.</h5><p><strong><em>错误描述</em></strong>：创建App使用网络请求的时候，Log信息如下：App Transport Security has blocked a cleartext HTTP (http://) resource load since it is insecure. Temporary exceptions can be configured via your app’s<br>Info.plist file.新特性要求App内访问网络请求，要采用 HTTPS 协议。</p><p><strong><em>解决办法</em></strong>：</p><p>​                1&gt;在 Info.plist 中添加类型为 Dictionary 的 NSAppTransportSecurity ;</p><p>​                2&gt;在 NSAppTransportSecurity 下添加 Boolean 类型的 NSAllowsArbitraryLoads 类型,值设为 YES;</p><p><img src="/.com//E:%5CHEXO%5Cthemes%5Cnext%5Csource%5Cimages%5C%E9%85%8D%E7%BD%AEplist%E6%96%87%E4%BB%B6.jpg" alt="配置 plist 文件"></p><h5 id="2-Declaration-of-sysctlbyname’-must-be-imported-from-module-‘Darwin-sys-sysctl’-before-it-is-required"><a href="#2-Declaration-of-sysctlbyname’-must-be-imported-from-module-‘Darwin-sys-sysctl’-before-it-is-required" class="headerlink" title="2. Declaration of sysctlbyname’ must be imported from module ‘Darwin.sys.sysctl’ before it is required"></a>2. Declaration of sysctlbyname’ must be imported from module ‘Darwin.sys.sysctl’ before it is required</h5><p><strong><em>解决方法</em></strong>：缺少相应的头文件，进行导入#import 操作即可。</p><h5 id="3-ERROR-ITMS-90717-“Invalid-App-Store-Icon-The-App-Store-Icon-in-the-asset-catalog-in-‘-app’-can’t-be-transparent-nor-contain-an-alpha-channel-”"><a href="#3-ERROR-ITMS-90717-“Invalid-App-Store-Icon-The-App-Store-Icon-in-the-asset-catalog-in-‘-app’-can’t-be-transparent-nor-contain-an-alpha-channel-”" class="headerlink" title="3. ERROR ITMS-90717: “Invalid App Store Icon. The App Store Icon in the asset catalog in ‘*.app’ can’t be transparent nor contain an alpha channel.”"></a>3. ERROR ITMS-90717: “Invalid App Store Icon. The App Store Icon in the asset catalog in ‘*.app’ can’t be transparent nor contain an alpha channel.”</h5><p><img src="/.com//E:%5CHEXO%5Cthemes%5Cnext%5Csource%5Cimages%5C%E9%94%99%E8%AF%AF%E6%88%AA%E5%9B%BE.jpg" alt="错误截图"></p><p><strong><em>解决办法</em></strong>：上传 AppStore 出现的图片问题，因为图片含有 alpha 通道或者透明度，直接打开图片，重新导出，去掉勾选的 Alpha 复选框，重新打包上传。</p><h5 id="4-ERROR-ITMS-4238-“Redundant-Binary-Upload-There-already-exists-a-binary-upload-with-build-version-‘1’-for-train-‘1-0’”-at-SoftwareAssets-PreReleaseSoftwareAsset"><a href="#4-ERROR-ITMS-4238-“Redundant-Binary-Upload-There-already-exists-a-binary-upload-with-build-version-‘1’-for-train-‘1-0’”-at-SoftwareAssets-PreReleaseSoftwareAsset" class="headerlink" title="4. ERROR ITMS-4238: “Redundant Binary Upload. There already exists a binary upload with build version ‘1’ for train ‘1.0’” at SoftwareAssets/PreReleaseSoftwareAsset"></a>4. ERROR ITMS-4238: “Redundant Binary Upload. There already exists a binary upload with build version ‘1’ for train ‘1.0’” at SoftwareAssets/PreReleaseSoftwareAsset</h5><p><strong><em>解决办法</em></strong>：上传 AppStore 版本重复问题，存在一个版本号为 1.0 的二进制文件，需要重新修改 version 和 build，建议两个保持一致。然后再进行上传操作 </p><p><img src="/.com//E:%5CHEXO%5Cthemes%5Cnext%5Csource%5Cimages%5C%E4%BF%AE%E6%94%B9%E7%89%88%E6%9C%AC%E5%8F%B7.jpg" alt="修改版本号"></p><h5 id="5-This-app-has-crashed-because-it-attempted-to-access-privacy-sensitive-data-without-a-usage-description-The-app’s-Info-plist-must-contain-an-NSPhotoLibraryAddUsageDescription-key-with-a-string-value-explaining-to-the-user-how-the-app-uses-this-data"><a href="#5-This-app-has-crashed-because-it-attempted-to-access-privacy-sensitive-data-without-a-usage-description-The-app’s-Info-plist-must-contain-an-NSPhotoLibraryAddUsageDescription-key-with-a-string-value-explaining-to-the-user-how-the-app-uses-this-data" class="headerlink" title="5. This app has crashed because it attempted to access privacy-sensitive data without a usage description.  The app’s Info.plist must contain an NSPhotoLibraryAddUsageDescription key with a string value explaining to the user how the app uses this data"></a>5. This app has crashed because it attempted to access privacy-sensitive data without a usage description.  The app’s Info.plist must contain an NSPhotoLibraryAddUsageDescription key with a string value explaining to the user how the app uses this data</h5><p><strong><em>解决办法</em></strong>：访问相册或者相机的操作，缺少相关的操作权限，未配置Info.plist文件。<br>在Info.plist文件中添加KEY为：Privacy - Photo Library Additions Usage Description的字段，类型是String，后边是描述语句</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;1-App-Transport-Security-has-blocked-a-cleartext-HTTP-http-resource-load-since-it-is-insecure-Temporary-exceptions-can-be-configured
      
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="错误整理" scheme="http://yoursite.com/tags/%E9%94%99%E8%AF%AF%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Python 中 MySQL 的相关操作</title>
    <link href="http://yoursite.com/2019/07/14/Python%20%E4%B8%AD%20MySQL%20%E7%9A%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/07/14/Python 中 MySQL 的相关操作/</id>
    <published>2019-07-14T11:47:47.000Z</published>
    <updated>2019-07-14T12:18:42.064Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python-中-MySQL-的相关操作"><a href="#Python-中-MySQL-的相关操作" class="headerlink" title="Python 中 MySQL 的相关操作"></a>Python 中 MySQL 的相关操作</h3><h4 id="1、MySQL-安装"><a href="#1、MySQL-安装" class="headerlink" title="1、MySQL 安装"></a>1、MySQL 安装</h4><ul><li><p>1.1、下载 MySQL</p><p>​    官网：<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a> 选择对应版本下载即可</p></li><li><p>1.2、安装</p><p>​    安装步骤就不在这里赘述。</p></li></ul><h4 id="2、MySQL-数据库连接，并实现增删改查等操作"><a href="#2、MySQL-数据库连接，并实现增删改查等操作" class="headerlink" title="2、MySQL 数据库连接，并实现增删改查等操作"></a>2、MySQL 数据库连接，并实现增删改查等操作</h4><p>​    <em>注意：首先需要需要进行 import 操作</em></p><ul><li>2.1、创建表操作(数据库相同的表明只能创建一次，多次创建会报错)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建表的操作 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_table</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 连接数据库     </span></span><br><span class="line">    db = pymysql.connect(host=<span class="string">'localhost'</span>,</span><br><span class="line">                         user=<span class="string">'root'</span>,</span><br><span class="line">                         password=<span class="string">'simplation'</span>,</span><br><span class="line">                         db=<span class="string">'test'</span></span><br><span class="line">                         )</span><br><span class="line">    sql = <span class="string">'''create table if not exists department (</span></span><br><span class="line"><span class="string">        id int NOT NULL AUTO_INCREMENT, </span></span><br><span class="line"><span class="string">                name text,              </span></span><br><span class="line"><span class="string">                sex text,              </span></span><br><span class="line"><span class="string">                salary float,              </span></span><br><span class="line"><span class="string">                PRIMARY KEY (`id`))'''</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用 cursor() 创建 cursor 对象</span></span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 执行 sql 语句的操作        </span></span><br><span class="line">        cursor.execute(sql)</span><br><span class="line">        <span class="comment"># 提交数据库的操作         </span></span><br><span class="line">        db.commit()</span><br><span class="line">        print(<span class="string">'create db success.'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 如果发生意外，则进行回滚操作         </span></span><br><span class="line">        db.rollback()</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="comment"># 关闭游标和数据库         </span></span><br><span class="line">        cursor.close()</span><br><span class="line">        db.close()</span><br></pre></td></tr></table></figure><ul><li>2.2、添加数据库操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入数据库的操作 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_table</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 连接数据库     </span></span><br><span class="line">    db = pymysql.connect(host=<span class="string">'localhost'</span>,</span><br><span class="line">                         user=<span class="string">'root'</span>,</span><br><span class="line">                         password=<span class="string">'simplation'</span>,</span><br><span class="line">                         db=<span class="string">'test'</span>,</span><br><span class="line">                         charset=<span class="string">"utf8"</span>)</span><br><span class="line">    print(<span class="string">'数据库连接成功.'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># sql 语句     </span></span><br><span class="line">    sql = <span class="string">'insert into department (name, sex, salary) values(%s, %s, %s)'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用 cursor() 创建 cursor 对象     </span></span><br><span class="line">    cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 创建要插入的值         </span></span><br><span class="line">        values = (<span class="string">'Mr.Li'</span>, <span class="string">'男'</span>, <span class="number">9000</span>)</span><br><span class="line">        <span class="comment"># 执行 sql 语句         </span></span><br><span class="line">        cursor.execute(sql, values)</span><br><span class="line">        <span class="comment"># 提交数据库操作         </span></span><br><span class="line">        db.commit()</span><br><span class="line">        print(<span class="string">'insert db success.'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 出现意外则进行回滚操作         </span></span><br><span class="line">        db.rollback()</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="comment"># 关闭游标和数据库         </span></span><br><span class="line">        cursor.close()</span><br><span class="line">        db.close()</span><br></pre></td></tr></table></figure><ul><li>2.3、修改数据库操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改数据库的操作</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_table</span><span class="params">()</span>:</span></span><br><span class="line">    db = pymysql.connect(host=<span class="string">'localhost'</span>,</span><br><span class="line">                         user=<span class="string">'root'</span>,</span><br><span class="line">                         password=<span class="string">'simplation'</span>,</span><br><span class="line">                         db=<span class="string">'test'</span>,</span><br><span class="line">                         charset=<span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'数据库连接成功.'</span>)</span><br><span class="line"></span><br><span class="line">    sql = <span class="string">'update department set name=%s, sex=%s, salary=%s where id = 2'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建 cursor 对象</span></span><br><span class="line"></span><br><span class="line">    cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        values = (<span class="string">'John'</span>, <span class="string">'男'</span>, <span class="number">7500</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 执行 sql 语句</span></span><br><span class="line">        cursor.execute(sql, values)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 提交数据库操作</span></span><br><span class="line">        db.commit()</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'update db success.'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 出现异常则进行回滚操作</span></span><br><span class="line">        db.rollback()</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="comment"># 关闭游标和数据库</span></span><br><span class="line">        cursor.close()</span><br><span class="line">        db.close()</span><br></pre></td></tr></table></figure><ul><li>2.4、查询数据库操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询数据库的操作</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_table</span><span class="params">()</span>:</span></span><br><span class="line">    db = pymysql.connect(host=<span class="string">'localhost'</span>,</span><br><span class="line">                         user=<span class="string">'root'</span>,</span><br><span class="line">                         password=<span class="string">'simplation'</span>,</span><br><span class="line">                         db=<span class="string">'test'</span>,</span><br><span class="line">                         charset=<span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'连接数据库成功.'</span>)</span><br><span class="line"></span><br><span class="line">    sql = <span class="string">'select * from department'</span></span><br><span class="line"></span><br><span class="line">    cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 执行 sql 语句</span></span><br><span class="line">        cursor.execute(sql)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 查询一条记录</span></span><br><span class="line">        result = cursor.fetchone()</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'查询到的一条记录是: id=%s name=%s, sex=%s, salary=%d'</span> % (result[<span class="number">0</span>], result[<span class="number">1</span>], result[<span class="number">2</span>], result[<span class="number">3</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果先⽤ fetchone()，游标是从 1 开始</span></span><br><span class="line">        <span class="comment"># 重置游标位置，偏移量:⼤于0向后移动;⼩于0向前移动，mode默认是relative</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># relative:表示从当前所在的⾏开始移动; absolute:表示从第⼀⾏开始移动</span></span><br><span class="line">        cursor.scroll(<span class="number">0</span>, mode=<span class="string">'absolute'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 查询多条语句</span></span><br><span class="line">        results = cursor.fetchall()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">            print(<span class="string">'查询到的记录是：id=%s, name=%s, sex=%s, salary=%s'</span> % (result[<span class="number">0</span>], result[<span class="number">1</span>], result[<span class="number">2</span>], result[<span class="number">3</span>]))</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'query db success.'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>  BaseException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 出现异常则进行回滚操作</span></span><br><span class="line">        db.rollback()</span><br><span class="line"></span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="comment"># 关闭游标和数据库</span></span><br><span class="line">        cursor.close()</span><br><span class="line">        db.close()</span><br></pre></td></tr></table></figure><ul><li>2.5、删除数据库操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除数据库的操作</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_table</span><span class="params">()</span>:</span></span><br><span class="line">    db = pymysql.connect(host=<span class="string">'localhost'</span>,</span><br><span class="line"></span><br><span class="line">                         user=<span class="string">'root'</span>,</span><br><span class="line"></span><br><span class="line">                         password=<span class="string">'simplation'</span>,</span><br><span class="line"></span><br><span class="line">                         db=<span class="string">'test'</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'db connect success.'</span>)</span><br><span class="line"></span><br><span class="line">    sql = <span class="string">'delete from department where id=%s'</span></span><br><span class="line"></span><br><span class="line">    cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 执行 sql 语句</span></span><br><span class="line"></span><br><span class="line">        cursor.execute(sql, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        db.commit()</span><br><span class="line">        print(<span class="string">'delete db success.'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 出现异常则进行回滚操作    </span></span><br><span class="line">        db.rollback()</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="comment"># 关闭游标和数据库</span></span><br><span class="line">        cursor.close()</span><br><span class="line">        db.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Python-中-MySQL-的相关操作&quot;&gt;&lt;a href=&quot;#Python-中-MySQL-的相关操作&quot; class=&quot;headerlink&quot; title=&quot;Python 中 MySQL 的相关操作&quot;&gt;&lt;/a&gt;Python 中 MySQL 的相关操作&lt;/h3&gt;&lt;
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="MySQL的相关操作" scheme="http://yoursite.com/tags/MySQL%E7%9A%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Python 中标准数据类型</title>
    <link href="http://yoursite.com/2019/07/11/Python%20%E4%B8%AD%E6%A0%87%E5%87%86%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/07/11/Python 中标准数据类型/</id>
    <published>2019-07-11T13:25:01.000Z</published>
    <updated>2019-07-11T13:32:10.813Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python-中标准数据类型"><a href="#Python-中标准数据类型" class="headerlink" title="Python 中标准数据类型"></a>Python 中标准数据类型</h3><h4 id="标准数据类型："><a href="#标准数据类型：" class="headerlink" title="标准数据类型："></a>标准数据类型：</h4><p>​    Number(数字)、String(字符串)、List(列表)、Tuple(元祖)、Dictionary(字典)、Sets(集合)</p><h5 id="Number-数字"><a href="#Number-数字" class="headerlink" title="Number(数字)"></a>Number(数字)</h5><ul><li>1.1、支持int(整数类型)、float(浮点型)、bool(布尔)、complex(复数)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">100</span>            <span class="comment"># 整数类型</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">10.0</span>           <span class="comment"># 浮点型</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="literal">True</span>           <span class="comment"># 布尔</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a,b,c)       <span class="comment"># 打印结果：100 10.0 True</span></span><br><span class="line"></span><br><span class="line">复数由实数部分和虚数部分构成，可以使用a + bj,或者complex(a, b)表示，复数的是实部a和虚部b都是浮点型</span><br></pre></td></tr></table></figure><ul><li><p>1.2、数值运算</p><p>加(+)、减(-)、乘(<em>)、除(/)、取余(%)、乘方(*</em>)</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a + b)        <span class="comment"># 加     打印结果：50</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a - b)        <span class="comment"># 减     打印结果：-10</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a * b)        <span class="comment"># 乘     打印结果：600</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a / b)        <span class="comment"># 除     打印结果：.6666666666666666</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a % b)        <span class="comment"># 取余   打印结果：20</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a ** b)       <span class="comment"># 乘方   打印结果：1073741824000000000000000000000000000000</span></span><br><span class="line"></span><br><span class="line">注：除法(/)返回的都是浮点类型的数值，而除法 (//)返回的是整型</span><br></pre></td></tr></table></figure><h5 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h5><p>​    Python中的字符串使用’’(单引号)或者””(双引号)将字符串进行包裹起来，但是特殊字符需要使用转义字符()进行转义操作。</p><ul><li>2.1、常用操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">'Hello， I \'m Simplation.'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(string)            <span class="comment"># 输出操作 返回 Hello， I 'm Simplation.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(len(string))       <span class="comment"># 打印结果：23</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(string[<span class="number">0</span>])         <span class="comment"># 打印结果：H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(string[<span class="number">0</span>, <span class="number">-1</span>])     <span class="comment"># 打印结果：Hello， I 'm Simplation</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(string[<span class="number">11</span>:<span class="number">22</span>])     <span class="comment"># 打印结果：Simplation </span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(string[<span class="number">11</span>:])       <span class="comment"># 打印结果：Simplation.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(string * <span class="number">2</span>)        <span class="comment"># 打印结果：Hello， I 'm Simplation.Hello， I 'm Simplation.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'everyone '</span> + string) <span class="comment">#e打印结果：everyone Hello， I 'm Simplation.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Simplation'</span> <span class="keyword">in</span> string) <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(string.find(<span class="string">'Simplation'</span>))    <span class="comment"># 查找 返回字符串所在下标 12</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(string.index(<span class="string">'Sim'</span>))        <span class="comment"># 12</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(string.upper())     <span class="comment"># HELLO， I 'M SIMPLATION.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(string.lower())     <span class="comment"># hello， i 'm simplation.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Simplation'</span> <span class="keyword">in</span> string)    <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(string.capitalize())    <span class="comment"># Hello， i 'm simplation.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(string.isspace())    <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(string.replace(<span class="string">'Sim'</span>, <span class="string">' '</span>))    <span class="comment"># Hello， I 'm  plation.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(string.split(<span class="string">'m'</span>))    <span class="comment"># ["Hello， I '", ' Si', 'plation.']</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(string.strip())       <span class="comment"># 去掉字符串左右两边的空格 Hello， I 'm Simplation.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(string.rstrip())      <span class="comment"># 去掉字符串右边的空格 Hello， I 'm Simplation.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(string.lstrip())      <span class="comment"># 去掉字符串左边的空格Hello， I 'm Simplation.</span></span><br></pre></td></tr></table></figure><ul><li><p>2.2、占位符</p><p>常用占位符：%d表示那个位置是整数；%f表示那个位置是浮点数；%s表示那个位置是字符串</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Hello, %s'</span> %<span class="string">'Python’)    # Hello, Python</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; print('</span>Hello, %d%s%<span class="number">.2</span><span class="string">f' %(666, '</span>Python<span class="string">', 9.99))     # Hello, 666Python9.99</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">注: </span></span><br><span class="line"><span class="string">2.2.1、% 是转换开始的标志；</span></span><br><span class="line"><span class="string">2.2.2、如果不止一个占位符，要写在一个圆括号内，中间用逗号隔开；</span></span><br><span class="line"><span class="string">2.2.3、%.2f代表两位小数，不是两位后会四舍五入</span></span><br></pre></td></tr></table></figure><ul><li><p>2.3、字符串换行</p><p>2.3.1、三个单引号：Python中三个单引号允许一个字符串跨多行，字符串中也可以包括换行符、制表符以及其他的字符，</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'''相思</span></span><br><span class="line"><span class="string">唐代：王维</span></span><br><span class="line"><span class="string">红豆生南国，春来发几枝。</span></span><br><span class="line"><span class="string">愿君多采撷，此物最相思。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s)</span><br><span class="line"></span><br><span class="line">相思</span><br><span class="line">唐代：王维</span><br><span class="line">红豆生南国，春来发几枝。</span><br><span class="line">愿君多采撷，此物最相思。</span><br></pre></td></tr></table></figure><p>  2.3.2、三个双引号</p><p>  2.3.3、\结尾</p><h5 id="List-列表"><a href="#List-列表" class="headerlink" title="List(列表)"></a>List(列表)</h5><p>​    列表是写在方括号[]中，元素用逗号,隔开,类标中的元素类型可以是不相同的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L = [<span class="number">6</span>, <span class="number">9.9</span>, <span class="string">'Simplation'</span>, <span class="literal">True</span>, <span class="string">'I\'m Simplation'</span>]       <span class="comment"># 创建列表</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(L)           <span class="comment"># [6, 9.9, 'Simplation', True, "I'm Simplation"]</span></span><br></pre></td></tr></table></figure><ul><li>3.1、访问元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(L)        <span class="comment"># 打印列表，结果：[6, 9.9, 'Simplation', True, "I'm Simplation”]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(len(L))   <span class="comment"># 打印列表的长度 结果：5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(L[<span class="number">1</span>])     <span class="comment"># 打印列表的第一个元素 结果：9.9</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(L[<span class="number">2</span>:<span class="number">4</span>])   <span class="comment"># 输出列表的第二个和第三个元素 结果：['Simplation', True]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(L[:<span class="number">4</span>])    <span class="comment"># 输出一个第0个到第三个元素   结果：[6, 9.9, 'Simplation', True]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(L[<span class="number">-1</span>])    <span class="comment"># 输出最后一个元素    结果：I'm Simplation</span></span><br></pre></td></tr></table></figure><ul><li>3.2、添加元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L1 = [<span class="literal">False</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(L + L1)    <span class="comment"># List 拼接</span></span><br><span class="line"></span><br><span class="line">[<span class="string">'1024'</span>, <span class="number">9.9</span>, <span class="string">'Simplation'</span>, <span class="literal">True</span>, <span class="string">"I'm Simplation"</span>, <span class="literal">False</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L.extend(L1)     <span class="comment"># 在List的末尾一次性增加一个元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(L)</span><br><span class="line"></span><br><span class="line">[<span class="string">'1024'</span>, <span class="number">9.9</span>, <span class="string">'Simplation'</span>, <span class="literal">True</span>, <span class="string">"I'm Simplation"</span>, <span class="literal">False</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L.extend(L1)     <span class="comment"># 每执行一次extend函数，就会在列表的最后一项添加一个元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(L)</span><br><span class="line"></span><br><span class="line">[<span class="string">'1024'</span>, <span class="number">9.9</span>, <span class="string">'Simplation'</span>, <span class="literal">True</span>, <span class="string">"I'm Simplation"</span>, <span class="literal">False</span>, <span class="literal">False</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L.append(<span class="string">'进行拼接测试’)    # append()方法拼接，在列表最后一项新增一个元素</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; print(L)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">['</span><span class="number">1024</span><span class="string">', 9.9, '</span>Simplation<span class="string">', True, "I'</span>m Simplation<span class="string">", False, False, '进行拼接测试’]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; L.insert(1, '不放假’)      # 在列表的某个位置插入元素 </span></span><br><span class="line"><span class="string">&gt;&gt;&gt; print(L)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">['1024', '不放假', 9.9, 'Simplation', True, "</span>I<span class="string">'m Simplation", False, False, '</span>进行拼接测试<span class="string">']</span></span><br></pre></td></tr></table></figure><ul><li>3.3、更新元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">0</span>] = <span class="string">'1024’           # 更新第0个元素的值为’1024’</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; print(L)                # 打印更新后的列表 ['</span><span class="number">1024</span><span class="string">', 9.9, '</span>Simplation<span class="string">', True, "I'</span>m Simplation<span class="string">"]</span></span><br></pre></td></tr></table></figure><ul><li>3.4、删除元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L.pop()                <span class="comment"># pop ⽅法删除，可指定位置，默认最后⼀个</span></span><br><span class="line"><span class="string">"I'm Simplation”</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; L</span></span><br><span class="line"><span class="string">['1024', 9.9, 'Simplation', True]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; L.pop(0)               # pop 指定位置 、</span></span><br><span class="line"><span class="string">'1024'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; L</span></span><br><span class="line"><span class="string">[9.9, 'Simplation', True]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; del L[-1]              # 删除列表最后一个元素</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; L</span></span><br><span class="line"><span class="string">[9.9, 'Simplation’]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; L.remove(9.9)          # 移除列表中某个值的第⼀个匹配项，没有会抛异常</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; L</span></span><br><span class="line"><span class="string">['Simplation']</span></span><br></pre></td></tr></table></figure><ul><li>3.5、其他</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(L * <span class="number">2</span>)        <span class="comment"># 将列表的内容打印两次</span></span><br><span class="line">[<span class="string">'1024'</span>, <span class="number">9.9</span>, <span class="string">'Simplation'</span>, <span class="literal">True</span>, <span class="string">"I'm Simplation"</span>, <span class="string">'1024'</span>, <span class="number">9.9</span>, <span class="string">'Simplation'</span>, <span class="literal">True</span>, <span class="string">"I'm Simplation”]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; L.reverse()         # 反向列表中元</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; print(L)</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; L3 = L.copy()       # 复制  浅拷贝操作</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; print(L3)</span></span><br><span class="line"><span class="string">["</span>I<span class="string">'m Simplation", True, '</span>Simplation<span class="string">', 9.9, '</span><span class="number">1024</span>’]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L3.clear()          <span class="comment"># 清空列表</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L3</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><h5 id="Tuple-元祖"><a href="#Tuple-元祖" class="headerlink" title="Tuple(元祖)"></a>Tuple(元祖)</h5><p>​    元组写在⼩括号 () ⾥，元素之间⽤逗号隔开，元组的元素不能修改，没有 append()，insert() 这样的⽅法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = (<span class="number">100</span>, <span class="number">100.0</span>, <span class="string">'Simplation'</span>, <span class="literal">True</span>, <span class="string">'I\'am Simpaltion.'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s)</span><br><span class="line">(<span class="number">100</span>, <span class="number">100.0</span>, <span class="string">'Simplation'</span>, <span class="literal">True</span>, <span class="string">"I'am Simpaltion."</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s[<span class="number">0</span>])              <span class="comment"># 输出 list 第 1 个元素</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s[<span class="number">2</span>:<span class="number">5</span>])            <span class="comment"># 输出 lsit 下标从第 2 个到第 4个元素</span></span><br><span class="line">(<span class="string">'Simplation'</span>, <span class="literal">True</span>, <span class="string">"I'am Simpaltion.”)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; print(s[2:])             # 输出 lsit 下标从第 2 个起后⾯所有元素</span></span><br><span class="line"><span class="string">('Simplation', True, "</span>I<span class="string">'am Simpaltion.", [1, 2, 3])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; s1 = (1, False)</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; print(s + s1)            # list 拼接</span></span><br><span class="line"><span class="string">(100, 100.0, '</span>Simplation<span class="string">', True, "I'</span>am Simpaltion.<span class="string">", [1, 2, 3], 1, False)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; print(s * 2)             # 打印两次</span></span><br><span class="line"><span class="string">(100, 100.0, 'Simplation', True, "</span>I<span class="string">'am Simpaltion.", [1, 2, 3], 100, 100.0, '</span>Simplation<span class="string">', True, "I'</span>am Simpaltion.<span class="string">", [1, 2, 3])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; print(len(s))            # 输出 list ⻓度</span></span><br><span class="line"><span class="string">6</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">注：虽然元组元素不能修改，但能把 list 当特殊元素。</span></span><br></pre></td></tr></table></figure><h5 id="Dictionary-字典"><a href="#Dictionary-字典" class="headerlink" title="Dictionary(字典)"></a>Dictionary(字典)</h5><p>​    字典⽤ { } 标识或者 dict() ⽅法创建字典，它是⼀个⽆序的键 (key) : 值 (value) 对集合。键 (key) 必须 使⽤不可变类型。在同⼀个字典中，键 (key) 必须是唯⼀的（不唯⼀，取最后⼀个值，不建议这样 写）。{ } 是⽤来创建⼀个空字典。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dic</span> = &#123;<span class="string">'name'</span>:<span class="string">'Simplation'</span>, <span class="string">'site'</span>: <span class="string">'[http://www.baidu.com]'</span>, <span class="string">'code'</span>: <span class="number">1024</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>5.1、访问元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(dic)                  <span class="comment"># 打印字典</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'Simplation'</span>, <span class="string">'site'</span>: <span class="string">'[http://www.baidu.com]'</span>, <span class="string">'code'</span>: <span class="number">1024</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(dic[<span class="string">'site'</span>])          <span class="comment"># 输出键为 site 的值</span></span><br><span class="line">[http://www.baidu.com[http://www.baidu.com</span><br></pre></td></tr></table></figure><ul><li>5.2、修改元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic[<span class="string">'code'</span>] = <span class="number">520</span>               <span class="comment"># 修改元素 </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(dic[<span class="string">'code'</span>])              <span class="comment"># 打印：520</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'Simplation'</span>, <span class="string">'site'</span>: <span class="string">'[http://www.baidu.com]'</span>, <span class="string">'code'</span>: <span class="number">520</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>5.3、新增元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic[<span class="string">'id'</span>] = <span class="number">1314</span>                <span class="comment"># 新增元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic、</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'Simplation'</span>, <span class="string">'site'</span>: <span class="string">'[http://www.baidu.com]'</span>, <span class="string">'code'</span>: <span class="number">520</span>, <span class="string">'id'</span>: <span class="number">1314</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>5.4、删除元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic.pop(<span class="string">'code’)            # 删除 code 键</span></span><br><span class="line"><span class="string">1024</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; print(dic)</span></span><br><span class="line"><span class="string">&#123;'</span>name<span class="string">': '</span>Simplation<span class="string">', '</span>site<span class="string">': '</span>[http://www.baidu.com]’&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic.clear()                <span class="comment"># 清空字典</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>5.5、其他</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dict() ⽅法创建字典 d = dict(id=1024, name</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = dict(id=<span class="number">1024</span>, name=<span class="string">'simplation'</span>, site=<span class="string">'[http://www.baidu.com/]'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d)</span><br><span class="line">&#123;<span class="string">'id'</span>: <span class="number">1024</span>, <span class="string">'name'</span>: <span class="string">'simplation'</span>, <span class="string">'site'</span>: <span class="string">'[http://www.baidu.com/]'</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d.copy())               <span class="comment"># 浅拷贝</span></span><br><span class="line">&#123;<span class="string">'id'</span>: <span class="number">1024</span>, <span class="string">'name'</span>: <span class="string">'simplation'</span>, <span class="string">'site'</span>: <span class="string">'[http://www.baidu.com/]'</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic.keys()                    <span class="comment"># 打印字典中的所有key值</span></span><br><span class="line">dict_keys([<span class="string">'name'</span>, <span class="string">'site'</span>, <span class="string">'code’])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; dic.values()                  # 打印字典中所有value值</span></span><br><span class="line"><span class="string">dict_values(['</span>Simplation<span class="string">', '</span>[http://www.baidu.com]<span class="string">', 1024])</span></span><br></pre></td></tr></table></figure><h5 id="Sets-集合"><a href="#Sets-集合" class="headerlink" title="Sets(集合)"></a>Sets(集合)</h5><p>​    集合是⼀个⽆序不重复元素的序列，⽤⼤括号 { } 或者 set() 函数创建。创建⼀个空集合必须⽤ set()， 因为 { } 是⽤来创建⼀个空字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = &#123;<span class="string">'name'</span>, <span class="string">'site'</span>, <span class="string">'code'</span>, <span class="number">1</span>, <span class="number">1</span>&#125;    <span class="comment"># 创建集合</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s)</span><br><span class="line">&#123;<span class="number">1</span>, <span class="string">'name'</span>, <span class="string">'site'</span>, <span class="string">'code'</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h5><p>​    Python ⾥⼀个特殊的值，叫做空值，⽤ None 表示。</p><h5 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h5><p>​    Python中内置的bif可以进行数据间的类型转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int(x)：将 x 转换为⼀个整数 </span><br><span class="line"></span><br><span class="line">float(x)：将 x 转换到⼀个浮点数 </span><br><span class="line"></span><br><span class="line">str(x)：将对象 x 转换为字符串 </span><br><span class="line"></span><br><span class="line">list(s)：将序列 s 转换为⼀个列表</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Python-中标准数据类型&quot;&gt;&lt;a href=&quot;#Python-中标准数据类型&quot; class=&quot;headerlink&quot; title=&quot;Python 中标准数据类型&quot;&gt;&lt;/a&gt;Python 中标准数据类型&lt;/h3&gt;&lt;h4 id=&quot;标准数据类型：&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="基本数据类型" scheme="http://yoursite.com/tags/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Chrome 常用插件汇总</title>
    <link href="http://yoursite.com/2019/07/01/Chrome%20%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E6%B1%87%E6%80%BB/"/>
    <id>http://yoursite.com/2019/07/01/Chrome 常用插件汇总/</id>
    <published>2019-07-01T14:24:04.000Z</published>
    <updated>2019-07-01T14:57:37.363Z</updated>
    
    <content type="html"><![CDATA[<p>自做 Android 以来，成为一名 Google 的死忠粉，Google 的软件产品几乎都用过，这篇主要记录一下 Chrome 的相关扩展程序，有了这些插件，你的 Chrome 绝对堪称神器。(要有取舍，当然这里忽略内存！！！)</p><ul><li><p>百度网盘助手</p><p><em>把网盘的下载地址导出到aria2/aria2-rpc，支持YAAW</em></p></li><li><p>Adblock Plus</p><p><em>免费广告拦截程序</em></p></li><li><p>Augmented Steam</p></li><li><p>ChroPath</p><p>生成和验证独特的选择器</p></li><li><p>Color by Fardos</p><p><em>从网站中选择颜色，保存颜色和渐变，获得匹配的色调和色调，并创建美丽的渐变</em></p></li><li><p>Dark Reader</p><p><em>黑色主题，适用于任何网站。关爱眼睛，就使用Dark Reader进行夜间和日间浏览</em></p></li><li><p>GayHub</p><p><em>github的一个很棒的扩展程序</em></p></li><li><p>Infinity 新标签页(Pro)</p><p><em>百万用户选择的新标签页和快速拨号，自由添加网站图标，云端高清壁纸，快速访问书签、天气、笔记、待办事项、扩展管理与历史记录</em></p></li><li><p>JavaScript and CSS Code Beautifier</p><p><em>打开 .css / .js / .json 文件时，可以美化 CSS，JavaScript 和 JSON 代码。</em></p></li><li><p>JSONView</p><p><em>验证、查看、并格式化 JSON 文档</em></p></li><li><p>Momentum</p><p><em>美化 Chrome 启动页，将新标签页替换为具有待办事项，天气和灵感的个人仪表板等。</em></p></li><li><p>Octotree</p><p><em>以树形结构显示 Github 仓库的代码，省去一级一级查找</em></p></li><li><p>Reggy</p><p><em>创建随机身份并在几秒钟内注册任何网站！ Reggy还包括一个内置的表格填充物</em></p></li><li><p>uBlock Origin</p><p><em>一款高效的网络请求过滤工具，占用极低的内存和 CPU。</em></p></li><li><p>Web Scraper</p><p><em>网站数据提取工具</em></p></li><li><p>书签侧边栏</p><p><em>在浏览器视图区左侧添加固定式的, 管理所有书签的侧边栏.</em></p></li><li><p>二管家</p><p><em>一个全能的拓展管理和用户脚本管理拓展</em></p></li><li><p>简悦 - SimpRead</p><p><em>让你瞬间进入沉浸式阅读的 Chrome 扩展，类似 Safari 的阅读模式。 包含 聚焦模式和阅读模式两种</em></p></li><li><p>谷歌访问助手</p><p><em>不用多说了吧</em></p></li><li><p>达达划词翻译</p><p><em>划词翻译、生词本、吐司弹词、与扇贝同步</em></p></li><li><p>Vysor<br><em>无需 root, 能够在 Chrome 里通过 USB 直接控制 Android 设备</em></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自做 Android 以来，成为一名 Google 的死忠粉，Google 的软件产品几乎都用过，这篇主要记录一下 Chrome 的相关扩展程序，有了这些插件，你的 Chrome 绝对堪称神器。(要有取舍，当然这里忽略内存！！！)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;百度网盘助
      
    
    </summary>
    
      <category term="Chrome" scheme="http://yoursite.com/categories/Chrome/"/>
    
      <category term="Browser" scheme="http://yoursite.com/categories/Chrome/Browser/"/>
    
    
      <category term="Chrome Extension" scheme="http://yoursite.com/tags/Chrome-Extension/"/>
    
  </entry>
  
  <entry>
    <title>Android 中常见问题汇总(附解决办法)</title>
    <link href="http://yoursite.com/2019/06/04/Android%20%E4%B8%AD%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>http://yoursite.com/2019/06/04/Android 中常见问题汇总/</id>
    <published>2019-06-04T11:47:04.000Z</published>
    <updated>2019-07-03T13:31:03.061Z</updated>
    
    <content type="html"><![CDATA[<p>本片博文主要介绍的是自己在日常工作中遇到的一些问题，在此统一做一个汇总，希望能后帮到大家。</p><ul><li>1.Android Studio 编译项目报错：The SourceSet ‘instrumentTest’ is not recognized by the Android Gradle Plugin.</li><li>2.导入Eclipse项目报错，Error:Could not determine the class-path for interface com.android.builder.model.AndroidProject.</li><li>3.使用Retrofit进行网络请求（post）的时候，log打印日志：java.lang.IllegalArgumentException: @FieldMap parameters can only be used with form encoding. (parameter #1)</li><li>4.查看SHAR1值的方法</li><li>5.Could not find com.android.tools.build:aapt2:3.2.1-4818971.</li><li>6.AAPT2 error: check logs for details</li><li>7.java.lang.UnsatisfiedLinkError: dlopen failed: library “/system/lib64/libweibosdkcore.so” needed or dlopened by “/system/lib64/libnativeloader.so” is not accessible for the namespace “classloader-namespace”</li><li>8.java.io.IOException: proguard.ParseException: Unexpected keyword ‘com.amap.api.mapcore.xx’</li><li>9.给项目添加 Android 10 的网络权限。</li><li>10.Android 中 String 资源文件添加空格/空白格</li><li>11.Android XListView 在刷新数据是越界问题。 </li><li>12.Didn’t find class “android.support.v4.content.FileProvider” on path:</li><li>13.AndroidStudio无法连接模拟器。</li><li>14.Android java.lang.RuntimeException: Parcelable encountered IOException writing serializable object </li><li>15.Android.os.TransactionTooLargeException 异常解决</li><li>16.java.lang.IllegalArgumentException: Both dimensions must be greater than 0 二维码扫描</li><li>17.Error:Execution failed for task ‘:包路径:mergeReleaseResources’.</li><li>18.Could not get unknown property ‘jnilibs’ for source set ‘main’ of type org.gradle.api.internal.tasks.DefaultSourceSet.</li><li>19.android N 调用相机错误提示: android.os.FileUriExposedException: file:///storage/emulated/0/picture1551231656.jpg exposed beyond app through Intent.getData()</li><li>20.The number of method references in a .dex file cannot exceed 64K.</li><li>21.Android Studio中references to other resources are not supported by build-time PNG generation解决方案</li><li>22.解决”No toolchains found in the NDK toolchains folder for ABI with prefix: </li><li>23.Annotation processors must be explicitly declared now.  The following dependencies on the compile classpath are found to contain annotation processor.  Please add them to the annotationProcessor configuration.  </li><li>24.java.util.concurrent.ExecutionException: com.android.builder.internal.aapt.v2.Aapt2Exception: Android resource compilation failed Output:  E:\working space\GaoxinSafetyEnter\appclient\build\intermediates\incremental\mergeDebugResources\merged.dir\values\values.xml:932: error: <item> inner element must either be a resource reference or empty.</item></li><li>25.Android TextView 显示后台返回的富文本内容</li><li>26.Android Activity 页面 Edittext 控件自动弹出软键盘的问题。（修改为使用时才弹出软键盘）</li><li>27.Could not find manifest-merger.jar (com.android.tools.build:manifest-merger:26.0.1).</li><li>28.布局报错：Error parsing XML: not well-formed (invalid token)</li><li>29.Android P 提示 java.io.IOException: Cleartext HTTP traffic to XXX not permitted</li><li>30.Android P Android java.lang.NoClassDefFoundError: Failed resolution of: Lorg/apache/commons/logging/LogFactory</li><li>31.java.lang.NoClassDefFoundError: Failed resolution of: Lokio/Buffer</li><li>32.java.lang.RuntimeException: Parcelable encountered IOException writing serializable object (name = com.example.app.moudle.CheckAgainstStandard$ListBean)</li><li>33.Android studio Could not download guava.jar</li><li>34.java.lang.IllegalArgumentException: timeout too large.</li><li>35.java.lang.SecurityException: Need to declare android.permission.REQUEST_INSTALL_PACKAGES to call this api</li></ul><hr><p><strong>1.Android Studio 编译项目报错：The SourceSet ‘instrumentTest’ is not recognized by the Android Gradle Plugin.</strong></p><p>解决办法：gradle 配置，这里的配置中 instrumentTest 已被弃用，不适用于现在的 gradle 版本。用 androidTest 替换 instrumentTest，编译运行即可。</p><p><strong>2.导入Eclipse 项目报错，Error:Could not determine the class-path for interface com.android.builder.model.AndroidProject.</strong></p><p>解决办法：修改自己本地安装的 gradle 版本号，然后重新编译执行。</p><p><strong>3.使用Retrofit进行网络请求（post）的时候，log打印日志：java.lang.IllegalArgumentException: @FieldMap parameters can only be used with form encoding. (parameter #1)</strong></p><p>解决办法：当POST请求时，@FormUrlEncoded和@Field简单的表单键值对。两个需要结合使用，否则会报错；@Query请求参数。无论是GET或POST的参数都可以用它来实现 </p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">正确写法：</span><br><span class="line"><span class="variable">@FormUrlEncoded</span></span><br><span class="line"><span class="variable">@POST</span>(forgetpwd)</span><br><span class="line">Observable&lt;ResponseBody&gt; forget(<span class="variable">@FieldMap</span> Map&lt;String, String&gt; map);</span><br></pre></td></tr></table></figure><p><strong>4.查看SHAR1值的办法。</strong></p><p>解决办法：<br>    (1).把apk的格式改为压缩文件，进行解压。<br>    (2).在解压出来的文件中获取META-INF文件夹下的CERT.RSA文件。<br>    (3).打开cmd Keytool –printcert –file 后面接文件的路径。 </p><p><strong>5.Could not find com.android.tools.build:aapt2:3.2.1-4818971.</strong></p><p>解决方法：在项目的build.gradle文件中，新增一行google()即可解决</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">allprojects </span>&#123;</span><br><span class="line"><span class="class">repositories </span>&#123;</span><br><span class="line">   jcenter()</span><br><span class="line">   google()<span class="comment">//新增这一行</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6.AAPT2 error: check logs for details</strong></p><p>解决办法：构建 App 的时候，打开 Build 窗口，点击 “Toggle View” 切换到文本输出。查看log具体输出原因</p><p><strong>7.java.lang.UnsatisfiedLinkError: dlopen failed: library “/system/lib64/libweibosdkcore.so” needed or dlopened by “/system/lib64/libnativeloader.so” is not accessible for the namespace “classloader-namespace”</strong></p><p>解决办法：根据错误提示，缺少对应的so文件，需要ctrl+shift+n找到so，并拷贝到jniLibs文件夹下，注意对应的文件位置。重新rebuild即可。</p><p><strong>8.java.io.IOException: proguard.ParseException: Unexpected keyword ‘com.amap.api.mapcore.xx’</strong></p><p>解决办法：<br>    1.检查关键字是否错误，keep class 等<br>    2.检查包名是否拼写错误<br>    3.检查是否有中文字符，比如括号，点，空格，空格，空格</p><p><strong>9.给项目添加 Android 10 的网络权限。</strong><br>解决办法：<br>    1.将如下代码，添加到xml文件中     </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">network-security-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base-config</span> <span class="attr">cleartextTrafficPermitted</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">network-security-config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​     2.在application中引用xml文件即可。        </p><p><strong>10.Android 中 String 资源文件添加空格/空白格</strong><br>解决办法：Android 中字符串资源放置在 string.xml 文件中，并且该文件不能识别空格，但是在实际开发过程中需要用到空格，在需要设置的地方添加 &#160; 即可。</p><p>*<em>11.Android XListView 在刷新数据是越界问题：java.lang.IndexOutOfBoundsException: Invalid index 1, size is 1 。 *</em></p><p>解决办法：</p><p>​        1.不使用下拉刷新的headView, </p><p>​        2.当adapter的数据被全部clean时,使用adapter.notifyDataSetInvalidated(); </p><p>​        3.在加入新的数据后,使用adapter.notifyDataSetChanged(); </p><p><strong>12.Didn’t find class “android.support.v4.content.FileProvider” on path:</strong></p><p>解决办法：</p><p>​    1.添加如下代码</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">defaultConfig</span> &#123;</span><br><span class="line"><span class="attribute">multiDexEnabled</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    2.在Application中重写 attachBaseContext() 方法 并初始化 MultiDex.install(this);</p><p><strong>13.AndroidStudio无法连接模拟器。</strong></p><p>解决办法：</p><p>​    1.首先进入到 AndroidStudio 下的plateform-tools目录下</p><p>​    2.执行 adb connect 127.0.0.1：62001</p><p>​    3.出现 connected to 127.0.0.1:62001 则表示连接成功</p><p>*<em>14.Android java.lang.RuntimeException: Parcelable encountered IOException writing serializable object *</em></p><p>解决办法：</p><p>​    1.抛出java.io.NotSerializableException异常,抛出这个异常是因为你的对象没有实现Serializable接口，只要实现该接口就好了。</p><p>​    2.抛出java.lang.RuntimeException异常,抛出这个异常是因为传递的对象里面的对象也要实现Serializable接口。</p><p><strong>15.Android.os.TransactionTooLargeException 异常解决</strong></p><p>解决办法：Android 中进程中通过 binder 是通讯的数据载体，当序列化数据过大时，会出现该异常。</p><p>​    1.可以通过 EventBus 等替代方案来解决。</p><p>​    2.使用 getIntent().getSerializableExtra() 传递数据，数据量不宜过大。</p><p><strong>16.java.lang.IllegalArgumentException: Both dimensions must be greater than 0 二维码扫描</strong></p><p>解决办法：需要将 ZXApplication 添加到配置清单文件中</p><p><strong>17.Error:Execution failed for task ‘:包路径:mergeReleaseResources’.</strong></p><p>解决办法：本地包路径\src\main\res\values\attrs.xml: Error: Found item Attr/textColor more than one time</p><p>根据错误信息描述可以推测出 textColor 属性被多次声明, 可以去掉多余的或者是无用的信息.</p><p><strong>18.Could not get unknown property ‘jnilibs’ for source set ‘main’ of type org.gradle.api.internal.tasks.DefaultSourceSet.</strong></p><p>解决办法：jnilibs需要更改为：jniLibs， 添加如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sourceSets&#123;</span><br><span class="line">    main&#123;</span><br><span class="line">        jniLibs.srcDirs=[<span class="string">'libs'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>19.android N 调用相机错误提示: android.os.FileUriExposedException: file:///storage/emulated/0/picture1551231656.jpg exposed beyond app through Intent.getData()</strong></p><p>解决办法：</p><p>​    1.调用相机 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启动拍照,并保存到临时文件</span></span><br><span class="line">Intent mIntent = <span class="keyword">new</span> Intent();</span><br><span class="line">mIntent.setAction(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class="line"><span class="keyword">int</span> currentVersion = Build.VERSION.SDK_INT;</span><br><span class="line"><span class="keyword">if</span> (currentVersion &lt; <span class="number">24</span>) &#123;</span><br><span class="line">    mIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(mPictureFile));</span><br><span class="line">    startActivityForResult(mIntent, REQUEST_CAMERA_IMAGE);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ContentValues contentValues = <span class="keyword">new</span> ContentValues(<span class="number">1</span>);</span><br><span class="line">    contentValues.put(MediaStore.Images.Media.DATA, mPictureFile.getAbsolutePath());</span><br><span class="line">    Uri uri = getContentResolver().insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,contentValues);</span><br><span class="line">    mIntent.putExtra(MediaStore.EXTRA_OUTPUT, uri);</span><br><span class="line">    startActivityForResult(mIntent, REQUEST_CAMERA_IMAGE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    2.获取图片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fileSrc = mPictureFile.getAbsolutePath();</span><br><span class="line">updateGallery(fileSrc);</span><br><span class="line">File file = <span class="keyword">new</span> File(fileSrc);</span><br><span class="line">Uri uri = FileProvider.getUriForFile(<span class="keyword">this</span>, getPackageName() + <span class="string">".provider"</span>, file);</span><br><span class="line">FaceUtil.cropPicture(<span class="keyword">this</span>, uri);</span><br></pre></td></tr></table></figure><p><strong>20.The number of method references in a .dex file cannot exceed 64K.</strong></p><p>解决办法：</p><p>​    1.在 dependencies 中添加如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'com.android.support:multidex:1.0.1'</span></span><br></pre></td></tr></table></figure><p>​    2.在 defaultConfig 中添加如下代码</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">multiDexEnabled <span class="keyword">true</span></span><br></pre></td></tr></table></figure><p>​    3.在 AndroidManifest.xml 中的 application 标签中添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android:name=<span class="string">"android.support.multidex.MultiDexApplication"</span>&gt;</span><br><span class="line">android:name=<span class="string">"com.xxxx.xxxx.YourApplication"</span>&gt;</span><br></pre></td></tr></table></figure><p>​    4.如果你的应用程序继承 Application , 那么你需要重写Application attachBaseContext方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context base)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">super</span>.attachBaseContext(base);   </span><br><span class="line">    MultiDex.install(<span class="keyword">this</span>) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>21.Android Studio中references to other resources are not supported by build-time PNG generation解决方案</strong></p><p>解决办法：在 build.gradle 文件中添加以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line">    vectorDrawables.useSupportLibrary = <span class="keyword">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>22.解决”No toolchains found in the NDK toolchains folder for ABI with prefix: mips64el-linux-android”错误</strong></p><p>解决办法：NDK的更新记录里有下边一段话:This version of the NDK is incompatible with the Android Gradle plugin<br>       version 3.0 or older. If you see an error like<br>       <figure class="highlight plain"><figcaption><span>toolchains found in the NDK toolchains folder for ABI with prefix: mips64el-linux-android,```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">       update your project file to [use plugin version 3.1 or newer]. You will also</span><br><span class="line">       need to upgrade to Android Studio 3.1 or newer.</span><br><span class="line"></span><br><span class="line">新版本的NDK与3.0及以前旧版的Android Gradle plugin插件不兼容</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">dependencies &#123;</span><br><span class="line">    classpath &apos;com.android.tools.build:gradle:3.2.0&apos;   // 修改为你拥有的版本号即可</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>*<em>23.Annotation processors must be explicitly declared now.  The following dependencies on the compile classpath are found to contain annotation processor.  Please add them to the annotationProcessor configuration.  *</em></p><p>解决办法：在项目的 build.gradle 文件中的 android 下的 defaultConfig 中添加如下代码，然后重新编译即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javaCompileOptions.annotationProcessorOptions.includeCompileClasspath = <span class="keyword">true</span></span><br></pre></td></tr></table></figure><p><strong>24.java.util.concurrent.ExecutionException: com.android.builder.internal.aapt.v2.Aapt2Exception: Android resource compilation failed Output:  E:\working space\GaoxinSafetyEnter\appclient\build\intermediates\incremental\mergeDebugResources\merged.dir\values\values.xml:932: error: <item> inner element must either be a resource reference or empty.</item></strong></p><p>解决办法：找到报错的目标文件的具体位置，打开全局搜索(Ctrl + Shift + F)   Scope  查找资源文件的名称，然后修改即可。</p><p><strong>25.Android TextView 显示后台返回的富文本内容</strong></p><p>解决办法：使用 Html.fromHtml() </p><p>​    1.定义富文本内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String content = <span class="string">"&lt;p style=\"padding: 0px; margin: 0px; color: rgb(43, 43, 43); font-family: 微软雅黑, 宋体, serif; font-size: 16px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial; text-indent: 2em;\"&gt;国家安全生产监督管理总局令&lt;\/p&gt;"</span></span><br></pre></td></tr></table></figure><p>​    2.使用 Html.fromHtml()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CharSequence charSequence = Html.fromHtml(content);</span><br><span class="line">contentTxt.setText(<span class="string">"内容:"</span> + charSequence);</span><br><span class="line">contentTxt.setMovementMethod(LinkMovementMethod.getInstance());</span><br></pre></td></tr></table></figure><p><strong>26.Android Activity 页面 Edittext 控件自动弹出软键盘的问题。（修改为使用时才弹出软键盘）</strong></p><p>解决办法：</p><p>​    1.在Edittext 控件上添加如下两个属性</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android:focusable=<span class="string">"true"</span></span><br><span class="line">android:focusableInTouchMode=<span class="string">"true"</span></span><br></pre></td></tr></table></figure><p>​    2.在配置清单文件中找到对应的 Activity 页面, 添加如下属性即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:windowSoftInputMode=<span class="string">"adjustResize|stateHidden"</span></span><br></pre></td></tr></table></figure><p><strong>27.Could not find manifest-merger.jar (com.android.tools.build:manifest-merger:26.0.1).</strong></p><p>解决办法：将 google() 和 jcenter() 换下位置，让它去 google 中下载 manifest-merger.jar 包，就可以编译通过.</p><p><strong>28.布局报错：Error parsing XML: not well-formed (invalid token)</strong></p><p>解决办法：首先确定布局文件编码是否为 utf-8 格式，其次是 xml 文件中不能出现 ‘&lt;’ ‘&gt;’ 等符号, 建议在代码中赋值.</p><p><strong>29.Android P 提示 java.io.IOException: Cleartext HTTP traffic to XXX not permitted</strong></p><p>解决办法：Android P的系统上面默认所有Http的请求都被阻止了。通过在AnroidManifestz.xml中的application显示设置：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;application android:<span class="attribute">usesCleartextTraffic</span>=<span class="string">"true"</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>30.Android P Android java.lang.NoClassDefFoundError: Failed resolution of: Lorg/apache/commons/logging/LogFactory</strong></p><p>解决办法：</p><p>​    1.添加 commons-logging-4.0.6 jar 到 libs 文件夹下并引用。</p><p>​    2.在AnroidManifest.xml中的application显示设置：<application android:usescleartexttraffic="true"></application></p><p><strong>31.java.lang.NoClassDefFoundError: Failed resolution of: Lokio/Buffer</strong></p><p>解决办法：缺少 Okio 的 Libs，添加进项目即可。 链接地址:https：//github.com/square/okio</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">' com.squareup.okio：okio：2.2.2 '</span></span><br></pre></td></tr></table></figure><p><strong>32.java.lang.RuntimeException: Parcelable encountered IOException writing serializable object (name = com.example.app.moudle.CheckAgainstStandard$ListBean)</strong></p><p>解决办法：该实体类中存在部分类没有实现 serializable 接口，仔细检查，让所有的类都实现 serializable 接口即可。</p><p><strong>33.Android studio Could not download guava.jar</strong></p><p>解决办法：项目中没有用到 guava.jar 的相关东西，删除 .gradle 和 .idea 两个文件夹，重新 rebuild 即可。</p><p><strong>34.java.lang.IllegalArgumentException: timeout too large.</strong></p><p>解决办法：网络请求中超时时间过长导致的，一般情况下超时时间设置为 5s 就可以了。</p><p><strong>35.java.lang.SecurityException: Need to declare android.permission.REQUEST_INSTALL_PACKAGES to call this api</strong></p><p>解决办法：配置清单文件中缺少 REQUEST_INSTALL_PACKAGES 权限，添加即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本片博文主要介绍的是自己在日常工作中遇到的一些问题，在此统一做一个汇总，希望能后帮到大家。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.Android Studio 编译项目报错：The SourceSet ‘instrumentTest’ is not recognized by th
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android问题" scheme="http://yoursite.com/tags/Android%E9%97%AE%E9%A2%98/"/>
    
      <category term="汇总" scheme="http://yoursite.com/tags/%E6%B1%87%E6%80%BB/"/>
    
  </entry>
  
  <entry>
    <title>关于 HEXO 的一些常用命令</title>
    <link href="http://yoursite.com/2019/05/28/%E5%85%B3%E4%BA%8E%20hexo%20%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/05/28/关于 hexo 的常用命令/</id>
    <published>2019-05-28T13:26:08.114Z</published>
    <updated>2019-06-28T14:00:48.797Z</updated>
    
    <content type="html"><![CDATA[<p>由于电脑系统重装，之前的内容没有备份, 从2017年到2019年的内容靠自己之前整理的一些笔记还原了部分文章。不过目前已经重新将架子搭起来，准备继续搞起来！！！<br>欢迎来到[Hexo]（<a href="https://hexo.io/）！" target="_blank" rel="noopener">https://hexo.io/）！</a> 这是你的第一篇文章。 有关详细信息，请查看[文档]（<a href="https://hexo.io/docs/）。" target="_blank" rel="noopener">https://hexo.io/docs/）。</a> 如果您在使用Hexo时遇到任何问题，可以在[故障排除]（<a href="https://hexo.io/docs/troubleshooting.html）中找到答案，或者您可以在[GitHub]（https://github.com）上找到我。/" target="_blank" rel="noopener">https://hexo.io/docs/troubleshooting.html）中找到答案，或者您可以在[GitHub]（https://github.com）上找到我。/</a> hexojs/ HEXO/问题）。</p><p>＃＃ 快速开始</p><p>###创建一个新帖子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new“我的新帖子”</span><br></pre></td></tr></table></figure><p>更多信息：[写作]（<a href="https://hexo.io/docs/writing.html）" target="_blank" rel="noopener">https://hexo.io/docs/writing.html）</a></p><p>###运行服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo服务器</span><br></pre></td></tr></table></figure><p>更多信息：[服务器]（<a href="https://hexo.io/docs/server.html）" target="_blank" rel="noopener">https://hexo.io/docs/server.html）</a></p><p>###生成静态文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo生成</span><br></pre></td></tr></table></figure><p>更多信息：[Generating]（<a href="https://hexo.io/docs/generating.html）" target="_blank" rel="noopener">https://hexo.io/docs/generating.html）</a></p><p>###部署到远程站点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>更多信息：[部署]（<a href="https://hexo.io/docs/deployment.html）" target="_blank" rel="noopener">https://hexo.io/docs/deployment.html）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于电脑系统重装，之前的内容没有备份, 从2017年到2019年的内容靠自己之前整理的一些笔记还原了部分文章。不过目前已经重新将架子搭起来，准备继续搞起来！！！&lt;br&gt;欢迎来到[Hexo]（&lt;a href=&quot;https://hexo.io/）！&quot; target=&quot;_blan
      
    
    </summary>
    
      <category term="HEXO 的常用命令" scheme="http://yoursite.com/categories/HEXO-%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="hexo 的操作" scheme="http://yoursite.com/tags/hexo-%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Python 第三方包管理工具-Pip</title>
    <link href="http://yoursite.com/2018/05/28/Python%20%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-Pip/"/>
    <id>http://yoursite.com/2018/05/28/Python 第三方包管理工具-Pip/</id>
    <published>2018-05-28T01:41:04.000Z</published>
    <updated>2019-06-28T14:10:42.668Z</updated>
    
    <content type="html"><![CDATA[<p>Pip 是Python 推荐的用于安装Python软件包的工具。首先简单说明一下  Pip 的用法。</p><ul><li>1.安装包管理工具</li><li>2.升级包管理工具</li><li>3.安装第三方的模块</li><li>4.卸载第三方的模块</li></ul><p>1、安装包管理工具 - pip        </p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo easy-<span class="keyword">install</span> pip</span><br></pre></td></tr></table></figure><p>2、升级包管理工具的版本</p><p>​    Linux 或 Mac OS 上：</p><pre><code>pip install -U pip</code></pre><p>​    Windows 上：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip <span class="keyword">install</span> -U pip</span><br></pre></td></tr></table></figure><p>3、使用包管理工具安装第三方的模块</p><p>​    举个简单的栗子，使用命令：pip3 install + 模块名。例如安装 PyMySQL 模块，则需要使用命令：</p><pre><code>pip3 install PyMySQL</code></pre><p><img src="/images/%E6%BC%94%E7%A4%BA%E5%AE%89%E8%A3%85PyMySQL.png" alt="演示安装PyMySQL"></p><p>4、使用包管理工具卸载模块</p><p>使用卸载模块命令即可对相应模块进行移除操作，命令：pip uninstall + 模块名。</p><p><img src="/images/%E5%8D%B8%E8%BD%BD%E6%A8%A1%E5%9D%97.png" alt="卸载模块"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Pip 是Python 推荐的用于安装Python软件包的工具。首先简单说明一下  Pip 的用法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.安装包管理工具&lt;/li&gt;
&lt;li&gt;2.升级包管理工具&lt;/li&gt;
&lt;li&gt;3.安装第三方的模块&lt;/li&gt;
&lt;li&gt;4.卸载第三方的模块&lt;/li&gt;
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Pip" scheme="http://yoursite.com/tags/Pip/"/>
    
      <category term="包管理工具" scheme="http://yoursite.com/tags/%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>CantuseSubversioncommandlineclient 的解决方案</title>
    <link href="http://yoursite.com/2018/05/08/CantuseSubversioncommandlineclient%20%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2018/05/08/CantuseSubversioncommandlineclient 的解决方案/</id>
    <published>2018-05-08T09:36:21.000Z</published>
    <updated>2019-07-15T14:26:32.509Z</updated>
    
    <content type="html"><![CDATA[<p>由于项目在 iPhone X 上出现异常，要对 Xcode 进行9.3版本的更新时，发现也需要对 Mac OS 升级为 10.13.4，不然会出现不兼容的情况，谁叫人家是大哥呢？ 作为一名程序猿，不升级怎么修复 Bug？！</p><p>经过漫长的等待，终于更新好了，咦，Finder 怎么编成“访达”，当然还有其他的一些变化，这是 Apple 在汉语化的结果。真是受不了这翻译，果断切换为英文版。好了废话不多说，当我兴冲冲的打开 Xcode，准备提交更改的代码时候，直接弹出 <strong>Can’t use Subversion command line client: svn Probably the path to Subversion executable is wrong. Fix it. 错误。</strong></p><p>当出现这个问题的时候，不管你的Mac上边安装的什么IDE，提交SVN的时候都会报 <em><del>Can’t use Subversion command line client: svn Probably the path to Subversion executable is wrong. Fix it. 错误。</del></em>下边我贴出的Android Studio的错误信息。</p><p><img src="/.com//E:%5CHEXO%5Cthemes%5Cnext%5Csource%5Cimages%5CAndroidStudio%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF.jpg" alt="Android Studio 错误信息"></p><p>首先来说一下 Windows 下的解决方法：Windows 下的这个错误比较容易解决，重新安装一下SVN，勾选一下 Command line client tools 这个选项，最后在IDE中设置一下 SVN 的相关路径即可。作为一个 Mac 新手，这个问题还是比较棘手，从错误信息来看，是缺少相关的工具。</p><p><strong>解决办法：</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">打开 Terminal 输入 xcode-<span class="keyword">select</span> <span class="comment">--install ,大概等待2分钟左右安装 Xcode 插件。等待安装完成之后，你就可以开心的提交代码。</span></span><br><span class="line"></span><br><span class="line">xcode-<span class="keyword">select</span> <span class="comment">--install</span></span><br></pre></td></tr></table></figure><p><img src="/.com//E:%5CHEXO%5Cthemes%5Cnext%5Csource%5Cimages%5C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.png" alt="解决办法"></p><p>在此记录一下遇到的问题，希望给遇到同样问题的小伙伴一点参考。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于项目在 iPhone X 上出现异常，要对 Xcode 进行9.3版本的更新时，发现也需要对 Mac OS 升级为 10.13.4，不然会出现不兼容的情况，谁叫人家是大哥呢？ 作为一名程序猿，不升级怎么修复 Bug？！&lt;/p&gt;
&lt;p&gt;经过漫长的等待，终于更新好了，咦，F
      
    
    </summary>
    
      <category term="CantuseSubversioncommandlineclient" scheme="http://yoursite.com/categories/CantuseSubversioncommandlineclient/"/>
    
    
      <category term="Xcode" scheme="http://yoursite.com/tags/Xcode/"/>
    
      <category term="Mac" scheme="http://yoursite.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发者协议更新的错误解决方法</title>
    <link href="http://yoursite.com/2018/04/22/iOS%20%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AE%E6%9B%B4%E6%96%B0%E7%9A%84%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/04/22/iOS 开发者协议更新的错误解决方法/</id>
    <published>2018-04-22T04:42:43.000Z</published>
    <updated>2019-07-16T12:16:22.848Z</updated>
    
    <content type="html"><![CDATA[<p>由于很久没有登陆苹果开发者账号，要不是需要更新App的版本，苹果开发者协议更新导致开发者账号不能正常使用的问题就会遗漏，既然问题来了，那就想办法解决一下喽。</p><p>首先贴出错误信息，如下图所示</p><p><img src="/.com//E:%5CHEXO%5Cthemes%5Cnext%5Csource%5Cimages%5C%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF.jpg" alt="异常信息"></p><p>按照以往的方式直接点击右上角的 Review Agreement，然后同意开发许可协议就可以解决问题，但这次似乎有点不同，提示需要编辑电话，既然不一样，那就直接看错误信息。根据错误信息提示：开发者协议已经更新，你必须接受开发者许可协议，首先你需要更新 Apple ID 的联系方式。</p><p><strong>解决办法：</strong></p><p>点击 applied.apple.com 链接进入联系方式修改，修改的时候需要提供短信验证码，填写完成后，在返回错误信息页面，直接刷新网页，就会出现如下页面。到这里就跟之前的解决方法是一样的，点击同意开发许可协议，然后点击完成就 OK。</p><p><img src="/.com//E:%5CHEXO%5Cthemes%5Cnext%5Csource%5Cimages%5C%E5%90%8C%E6%84%8F%E8%AE%B8%E5%8F%AF%E5%8D%8F%E8%AE%AE.jpg" alt="同意许可协议"></p><p>在此记录一下遇到的问题，希望给遇到同样问题的小伙伴一点参考。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于很久没有登陆苹果开发者账号，要不是需要更新App的版本，苹果开发者协议更新导致开发者账号不能正常使用的问题就会遗漏，既然问题来了，那就想办法解决一下喽。&lt;/p&gt;
&lt;p&gt;首先贴出错误信息，如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/.com//E:%5CHEXO%5C
      
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="开发者许可协议更新" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E8%80%85%E8%AE%B8%E5%8F%AF%E5%8D%8F%E8%AE%AE%E6%9B%B4%E6%96%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python 中字符串的相关用法</title>
    <link href="http://yoursite.com/2018/04/02/Python%20%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E7%9B%B8%E5%85%B3%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2018/04/02/Python 中字符串的相关用法/</id>
    <published>2018-04-02T06:31:41.000Z</published>
    <updated>2019-06-28T14:09:27.682Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章主要记录一下Python中关于字符串的相关操作，一来是为了自己加深记忆，二来是方便后期查找起来比较快速。</p><ul><li><p>1、拼接字符串</p></li><li><p>2、字符串复制</p></li><li><p>3、字符串长度</p></li><li><p>4、字符串大小写转换(如果不进行重新赋值操作，原数据是不会发生变化的)</p></li><li><p>5、给字符串编号(从左到右是是从0开始)</p></li><li><p>6、字符串截取 </p></li><li><p>7、去掉字符串的空格</p></li></ul><h4 id="1、拼接字符串"><a href="#1、拼接字符串" class="headerlink" title="1、拼接字符串"></a>1、拼接字符串</h4><h5 id="1-1、使用-来拼接，只能操作相同类型"><a href="#1-1、使用-来拼接，只能操作相同类型" class="headerlink" title="1.1、使用 + 来拼接，只能操作相同类型"></a>1.1、使用 + 来拼接，只能操作相同类型</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"正在学习"</span></span><br><span class="line">b = <span class="string">"Python"</span></span><br><span class="line">c = a + b</span><br><span class="line"></span><br><span class="line">print(c)    <span class="comment"># 正在学习Python</span></span><br></pre></td></tr></table></figure><h5 id="1-2、使用占位符来拼接字符串"><a href="#1-2、使用占位符来拼接字符串" class="headerlink" title="1.2、使用占位符来拼接字符串"></a>1.2、使用占位符来拼接字符串</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'Py'</span></span><br><span class="line">b = <span class="string">'thon'</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'%s%s'</span> % (a, b))    <span class="comment"># Python</span></span><br></pre></td></tr></table></figure><h4 id="2、字符串复制"><a href="#2、字符串复制" class="headerlink" title="2、字符串复制"></a>2、字符串复制</h4><h5 id="2-1、使用等号进行字符串的复制"><a href="#2-1、使用等号进行字符串的复制" class="headerlink" title="2.1、使用等号进行字符串的复制"></a>2.1、使用等号进行字符串的复制</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'copy string...'</span></span><br><span class="line">print(a)        <span class="comment"># result:copystring...</span></span><br><span class="line"></span><br><span class="line">b = a</span><br><span class="line">print(b)        <span class="comment"># result:copy string...</span></span><br></pre></td></tr></table></figure><h4 id="3、字符串长度"><a href="#3、字符串长度" class="headerlink" title="3、字符串长度"></a>3、字符串长度</h4><h5 id="使用len-函数获取字符串的长度"><a href="#使用len-函数获取字符串的长度" class="headerlink" title="使用len()函数获取字符串的长度"></a>使用len()函数获取字符串的长度</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A = <span class="string">'copy string...'</span></span><br><span class="line"></span><br><span class="line">print(A)        <span class="comment"># result:copy string...</span></span><br><span class="line">print(len(A))   <span class="comment"># result:14</span></span><br></pre></td></tr></table></figure><h4 id="4、字符串大小写转换-如果不进行重新赋值操作，原数据是不会发生变化的"><a href="#4、字符串大小写转换-如果不进行重新赋值操作，原数据是不会发生变化的" class="headerlink" title="4、字符串大小写转换(如果不进行重新赋值操作，原数据是不会发生变化的)"></a>4、字符串大小写转换(如果不进行重新赋值操作，原数据是不会发生变化的)</h4><h5 id="4-1、将小写转换成大写"><a href="#4-1、将小写转换成大写" class="headerlink" title="4.1、将小写转换成大写"></a>4.1、将小写转换成大写</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'copy, python'</span></span><br><span class="line">a.upper()  <span class="comment"># 将小写完全变成大写</span></span><br><span class="line">print(a)   <span class="comment"># result:'COPY, PYTHON'</span></span><br><span class="line">print(a)   <span class="comment"># result:'copy, python'  # 原数据没有改变</span></span><br><span class="line"></span><br><span class="line">b = a.upper()  <span class="comment"># 进行重新赋值，就会发生变化</span></span><br><span class="line">print(b)   <span class="comment"># result:'COPY, PYTHON'</span></span><br></pre></td></tr></table></figure><h5 id="4-2、将大写转换成小写"><a href="#4-2、将大写转换成小写" class="headerlink" title="4.2、将大写转换成小写"></a>4.2、将大写转换成小写</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c = b.lower()</span><br><span class="line">print(c)   <span class="comment"># result:'copy, python'</span></span><br></pre></td></tr></table></figure><h5 id="4-3、只改变首字符的大小写"><a href="#4-3、只改变首字符的大小写" class="headerlink" title="4.3、只改变首字符的大小写"></a>4.3、只改变首字符的大小写</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">print(a)   <span class="comment"># result:'copy, python'</span></span><br><span class="line"></span><br><span class="line">a.capitalize()  <span class="comment"># 改变首字母为大写</span></span><br><span class="line">print(a)   <span class="comment"># result:'Copy, python'</span></span><br><span class="line">print(a)   <span class="comment"># result:'copy, python'</span></span><br><span class="line"></span><br><span class="line">b = a.capitalize()</span><br><span class="line">print(a)   <span class="comment"># result:'Copy, python'</span></span><br><span class="line">print(b)   <span class="comment"># result:'copy, python'</span></span><br></pre></td></tr></table></figure><h4 id="4-4、判断首字母是否是大写-不含有逗号，且首字母大写的情况才是正确"><a href="#4-4、判断首字母是否是大写-不含有逗号，且首字母大写的情况才是正确" class="headerlink" title="4.4、判断首字母是否是大写(不含有逗号，且首字母大写的情况才是正确)"></a>4.4、判断首字母是否是大写(不含有逗号，且首字母大写的情况才是正确)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'Hello, python'</span>  <span class="comment"># 含有逗号的情况,直接返回 False。第一个是大写，第二个是小写</span></span><br><span class="line">print(a.istitle())   <span class="comment"># result:False</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">'Hello, Python'</span></span><br><span class="line">print(a.istitle())   <span class="comment"># result:True</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">'HelloPython'</span></span><br><span class="line">print(a.istitle())   <span class="comment"># result:True</span></span><br></pre></td></tr></table></figure><h5 id="4-5、判断字符串是否都是大写"><a href="#4-5、判断字符串是否都是大写" class="headerlink" title="4.5、判断字符串是否都是大写"></a>4.5、判断字符串是否都是大写</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'HelloPython'</span></span><br><span class="line">print(a.isupper())   <span class="comment"># result:False</span></span><br><span class="line">print(a.upper().isupper())  <span class="comment"># result:True</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">'Hello,Python'</span></span><br><span class="line">print(a.islower())   <span class="comment"># result:False</span></span><br><span class="line">print(a.lower().islower())   <span class="comment"># result:True</span></span><br></pre></td></tr></table></figure><h4 id="5、给字符串编号-从左到右是是从0开始"><a href="#5、给字符串编号-从左到右是是从0开始" class="headerlink" title="5、给字符串编号(从左到右是是从0开始)"></a>5、给字符串编号(从左到右是是从0开始)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'Hello, World!'</span></span><br><span class="line"></span><br><span class="line">print(len(a)) <span class="comment"># result:13</span></span><br><span class="line">print(a[<span class="number">0</span>])   <span class="comment"># result:'H'</span></span><br><span class="line">print(a[<span class="number">9</span>])   <span class="comment"># result:'r'</span></span><br><span class="line">print(a[<span class="number">-1</span>])  <span class="comment"># 从右到左是从-1开始的   result:'!'</span></span><br></pre></td></tr></table></figure><h4 id="6、字符串截取"><a href="#6、字符串截取" class="headerlink" title="6、字符串截取"></a>6、字符串截取</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'Hello,World'</span></span><br><span class="line"></span><br><span class="line">print(a[<span class="number">2</span>:<span class="number">5</span>])  <span class="comment"># 从a开始到b结束    result:'llo'</span></span><br><span class="line">print(a[<span class="number">3</span>:])   <span class="comment"># 从a开始，截取到结束      # 'lo,World'</span></span><br><span class="line">print(a[:<span class="number">5</span>])   <span class="comment"># 从开始位置截取到b位置    # result:'Hello,'</span></span><br></pre></td></tr></table></figure><h4 id="7、去掉字符串的空格"><a href="#7、去掉字符串的空格" class="headerlink" title="7、去掉字符串的空格"></a>7、去掉字符串的空格</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">' Hello '</span></span><br><span class="line"></span><br><span class="line">print(a.strip())   <span class="comment"># 去掉前后的空格    # result:'Hello'</span></span><br><span class="line">print(a)           <span class="comment"># result:' Hello '</span></span><br><span class="line">print(b.lstrip())  <span class="comment"># 去掉前面的空格    # result:'Hello '</span></span><br><span class="line">print(b.rstrip())  <span class="comment"># 去掉后面的空格    # result:' Hello'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇文章主要记录一下Python中关于字符串的相关操作，一来是为了自己加深记忆，二来是方便后期查找起来比较快速。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1、拼接字符串&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2、字符串复制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3、字符串长度&lt;/p&gt;
&lt;/
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="python字符串" scheme="http://yoursite.com/tags/python%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 快捷键整理.md</title>
    <link href="http://yoursite.com/2017/08/14/Android%20Studio%20%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%95%B4%E7%90%86-md/"/>
    <id>http://yoursite.com/2017/08/14/Android Studio 快捷键整理-md/</id>
    <published>2017-08-14T13:28:06.000Z</published>
    <updated>2020-08-14T07:31:20.068Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h2><table><thead><tr><th>说明</th><th>Windows/Linux</th><th>Mac</th></tr></thead><tbody><tr><td>全部保存</td><td>Ctrl+S</td><td>Command+S</td></tr><tr><td>同步</td><td>Ctrl+Alt+Y</td><td>Command+Option+Y</td></tr><tr><td>最大化/最小化编辑器</td><td>Ctrl+Shift+F12</td><td>Ctrl+Command+F12</td></tr><tr><td>添加到收藏夹</td><td>Alt+Shift+F</td><td>Option+Shift+F</td></tr><tr><td>使用当前配置文件检查当前文件</td><td>Alt+Shift+I</td><td>Option+Shift+I</td></tr><tr><td>快速切换方案</td><td>Ctrl+<code>（反引号）</code></td><td>Ctrl+<code>（反引号）</code></td></tr><tr><td>打开设置对话框</td><td>Ctrl+Alt+S</td><td>Command+,（英文逗号）</td></tr><tr><td>打开项目结构对话框</td><td>Ctrl+Alt+Shift+S</td><td>Command+;（英文分号）</td></tr><tr><td>在标签页和工具窗口之间切换</td><td>Ctrl+Tab</td><td>Ctrl+Tab</td></tr></tbody></table><h2 id="在-Studio-内导航和搜索"><a href="#在-Studio-内导航和搜索" class="headerlink" title="在 Studio 内导航和搜索"></a>在 Studio 内导航和搜索</h2><table><thead><tr><th>说明</th><th>Windows/Linux</th><th>Mac</th></tr></thead><tbody><tr><td>搜索全部内容（包括代码和菜单）</td><td>按两次 Shift</td><td>按两次 Shift</td></tr><tr><td>查找</td><td>Ctrl+F</td><td>Command+F</td></tr><tr><td>查找下一项内容</td><td>F3</td><td>Command+G</td></tr><tr><td>查找上一项内容</td><td>Shift+F3</td><td>Command+Shift+G</td></tr><tr><td>替换</td><td>Ctrl+R</td><td>Command+R</td></tr><tr><td>查找操作</td><td>Ctrl+Shift+A</td><td>Command+Shift+A</td></tr><tr><td>按符号名称搜索</td><td>Ctrl+Alt+Shift+N</td><td>Command+Option+O</td></tr><tr><td>查找类</td><td>Ctrl+N</td><td>Command+O</td></tr><tr><td>查找文件（而不是类）</td><td>Ctrl+Shift+N</td><td>Command+Shift+O</td></tr><tr><td>在路径中查找</td><td>Ctrl+Shift+F</td><td>Command+Shift+F</td></tr><tr><td>打开文件结构弹出式菜单</td><td>Ctrl+F12</td><td>Command+F12</td></tr><tr><td>在打开的编辑器标签页之间导航</td><td>Alt+向右箭头或向左箭头</td><td>Ctrl+向右箭头或 Ctrl+向左箭头</td></tr><tr><td>跳到源代码</td><td>F4 或 Ctrl+Enter</td><td>F4 或 Command+向下箭头</td></tr><tr><td>在新窗口中打开当前编辑器标签页</td><td>Shift+F4</td><td>Shift+F4</td></tr><tr><td>最近打开的文件弹出式菜单</td><td>Ctrl+E</td><td>Command+E</td></tr><tr><td>最近编辑的文件弹出式菜单</td><td>Ctrl+Shift+E</td><td>Command+Shift+E</td></tr><tr><td>转到上一个编辑位置</td><td>Ctrl+Shift+退格键</td><td>Command+Shift+Delete</td></tr><tr><td>关闭活动编辑器标签页</td><td>Ctrl+F4</td><td>Command+W</td></tr><tr><td>从工具窗口返回到编辑器窗口</td><td>Esc</td><td>Esc</td></tr><tr><td>隐藏活动工具窗口或上一个活动工具窗口</td><td>Shift+Esc</td><td>Shift+Esc</td></tr><tr><td>转到行</td><td>Ctrl+G</td><td>Command+L</td></tr><tr><td>打开类型层次结构</td><td>Ctrl+H</td><td>Ctrl+H</td></tr><tr><td>打开方法层次结构</td><td>Ctrl+Shift+H</td><td>Command+Shift+H</td></tr><tr><td>打开调用层次结构</td><td>Ctrl+Alt+H</td><td>Ctrl+Option+H</td></tr></tbody></table><h2 id="查看布局"><a href="#查看布局" class="headerlink" title="查看布局"></a>查看布局</h2><table><thead><tr><th>说明</th><th>Windows/Linux</th><th>Mac</th></tr></thead><tbody><tr><td>放大/缩小</td><td>Ctrl+加号键或 Ctrl+减号键</td><td>Command+加号键或 Command+减号键</td></tr><tr><td>适合屏幕大小</td><td>Ctrl+0</td><td>Command+0</td></tr><tr><td>实际尺寸</td><td>Ctrl+Shift+1</td><td>Command+Shift+1</td></tr></tbody></table><h2 id="设计工具：布局查看器"><a href="#设计工具：布局查看器" class="headerlink" title="设计工具：布局查看器"></a>设计工具：布局查看器</h2><table><thead><tr><th>说明</th><th>Windows/Linux</th><th>Mac</th></tr></thead><tbody><tr><td>在设计和蓝图模式之间切换</td><td>B</td><td>B</td></tr><tr><td>在竖屏和横屏模式之间切换</td><td>O</td><td>O</td></tr><tr><td>切换设备</td><td>D</td><td>D</td></tr><tr><td>强制刷新</td><td>R</td><td>R</td></tr><tr><td>切换渲染错误面板</td><td>E</td><td>E</td></tr><tr><td>删除限制</td><td>Delete 或 Ctrl+点击</td><td>Delete 或 Command+点击</td></tr><tr><td>放大</td><td>Ctrl+加号键</td><td>Command+加号键</td></tr><tr><td>缩小</td><td>Ctrl+减号键</td><td>Command+减号键</td></tr><tr><td>缩放至合适大小</td><td>Ctrl+0</td><td>Command+0</td></tr><tr><td>平移</td><td>按住空格键+点击并拖动</td><td>按住空格键+点击并拖动</td></tr><tr><td>转到 XML</td><td>Ctrl+B</td><td>Command+B</td></tr><tr><td>选择所有组件</td><td>Ctrl+A</td><td>Command+A</td></tr><tr><td>选择多个组件</td><td>Shift+点击或 Ctrl+点击</td><td>Shift+点击或 Command+点击</td></tr></tbody></table><h2 id="设计工具：导航编辑器"><a href="#设计工具：导航编辑器" class="headerlink" title="设计工具：导航编辑器"></a>设计工具：导航编辑器</h2><table><thead><tr><th>说明</th><th>Windows/Linux</th><th>Mac</th></tr></thead><tbody><tr><td>放大</td><td>Ctrl+加号键</td><td>Command+加号键</td></tr><tr><td>缩小</td><td>Ctrl+减号键</td><td>Command+减号键</td></tr><tr><td>缩放至合适大小</td><td>Ctrl+0</td><td>Command+0</td></tr><tr><td>平移</td><td>按住空格键+点击并拖动</td><td>按住空格键+点击并拖动</td></tr><tr><td>转到 XML</td><td>Ctrl+B</td><td>Command+B</td></tr><tr><td>切换渲染错误面板</td><td>E</td><td>E</td></tr><tr><td>分组到嵌套图表</td><td>Ctrl+G</td><td>Command+G</td></tr><tr><td>循环浏览目标位置</td><td>Tab 或 Shift+Tab</td><td>Tab 或 Shift+Tab</td></tr><tr><td>选择所有目标位置</td><td>Ctrl+A</td><td>Command+A</td></tr><tr><td>选择多个目标位置</td><td>Shift+点击或 Ctrl+点击</td><td>Shift+点击或 Command+点击</td></tr></tbody></table><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><table><thead><tr><th>说明</th><th>Windows/Linux</th><th>Mac</th></tr></thead><tbody><tr><td>生成代码（getter、setter、构造函数、hashCode/equals、toString、新文件、新类）</td><td>Alt+Insert</td><td>Command+N</td></tr><tr><td>替换方法</td><td>Ctrl+O</td><td>Ctrl+O</td></tr><tr><td>实现方法</td><td>Ctrl+I</td><td>Ctrl+I</td></tr><tr><td>控制语句（if…else / try…catch / 等）</td><td>Ctrl+Alt+T</td><td>Command+Option+T</td></tr><tr><td>删除插入符处的行</td><td>Ctrl+Y</td><td>Command+Delete</td></tr><tr><td>收起/展开当前代码块</td><td>Ctrl+减号键或 Ctrl+加号键</td><td>Command+减号键或 Command+加号键</td></tr><tr><td>收起/展开所有代码块</td><td>Ctrl+Shift+减号键或 Ctrl+Shift+加号键</td><td>Command+Shift+减号键或 Command+Shift+加号键</td></tr><tr><td>复制当前行或选择</td><td>Ctrl+D</td><td>Command+D</td></tr><tr><td>基本代码补全</td><td>Ctrl+空格键</td><td>Ctrl+空格键</td></tr><tr><td>智能代码补全（按预期类型过滤方法和变量列表）</td><td>Ctrl+Shift+空格键</td><td>Ctrl+Shift+空格键</td></tr><tr><td>完成语句</td><td>Ctrl+Shift+Enter</td><td>Command+Shift+Enter</td></tr><tr><td>快速查找文档</td><td>Ctrl+Q</td><td>Ctrl+J</td></tr><tr><td>显示选定方法的参数</td><td>Ctrl+P</td><td>Command+P</td></tr><tr><td>转到声明（直接）</td><td>Ctrl+B 或 Ctrl+点击</td><td>Command+B 或 Command+点击</td></tr><tr><td>转到实现</td><td>Ctrl+Alt+B</td><td>Command+Option+B</td></tr><tr><td>转到超方法/超类</td><td>Ctrl+U</td><td>Command+U</td></tr><tr><td>打开快速定义查找</td><td>Ctrl+Shift+I</td><td>Command+Y</td></tr><tr><td>切换项目工具窗口的可见性</td><td>Alt+1</td><td>Command+1</td></tr><tr><td>切换书签</td><td>F11</td><td>F3</td></tr><tr><td>通过助记符切换书签</td><td>Ctrl+F11</td><td>Option+F3</td></tr><tr><td>通过行注释添加注释/取消注释</td><td>Ctrl+/</td><td>Command+/</td></tr><tr><td>通过块注释添加注释/取消注释</td><td>Ctrl+Shift+/</td><td>Command+Shift+/</td></tr><tr><td>选择连续增加的代码块</td><td>Ctrl+W</td><td>Option+向上箭头</td></tr><tr><td>将当前选择退回到上一个状态</td><td>Ctrl+Shift+W</td><td>Option+向下箭头</td></tr><tr><td>移动到代码块起始位置</td><td>Ctrl+[</td><td>Option+Command+[</td></tr><tr><td>移动到代码块结束位置</td><td>Ctrl+]</td><td>Option+Command+]</td></tr><tr><td>从当前位置选择到代码块起始位置</td><td>Ctrl+Shift+[</td><td>Option+Command+Shift+[</td></tr><tr><td>从当前位置选择到代码块结束位置</td><td>Ctrl+Shift+]</td><td>Option+Command+Shift+]</td></tr><tr><td>从当前位置删除到单词结尾位置</td><td>Ctrl+Delete</td><td>Option+Delete</td></tr><tr><td>从当前位置删除到单词开头位置</td><td>Ctrl+退格键</td><td>Option+Delete</td></tr><tr><td>优化导入</td><td>Ctrl+Alt+O</td><td>Ctrl+Option+O</td></tr><tr><td>项目快速修复（显示意图操作和快速修复）</td><td>Alt+Enter</td><td>Option+Enter</td></tr><tr><td>重新格式化代码</td><td>Ctrl+Alt+L</td><td>Command+Option+L</td></tr><tr><td>自动缩进行</td><td>Ctrl+Alt+I</td><td>Ctrl+Option+I</td></tr><tr><td>缩进/取消缩进行</td><td>Tab 或 Shift+Tab</td><td>Tab 或 Shift+Tab</td></tr><tr><td>智能行合并</td><td>Ctrl+Shift+J</td><td>Ctrl+Shift+J</td></tr><tr><td>智能行拆分</td><td>Ctrl+Enter</td><td>Command+Enter</td></tr><tr><td>开始新行</td><td>Shift+Enter</td><td>Shift+Enter</td></tr><tr><td>下一个/上一个突出显示的错误</td><td>F2 或 Shift+F2</td><td>F2 或 Shift+F2</td></tr></tbody></table><h2 id="编译并运行"><a href="#编译并运行" class="headerlink" title="编译并运行"></a>编译并运行</h2><table><thead><tr><th>说明</th><th>Windows/Linux</th><th>Mac</th></tr></thead><tbody><tr><td>编译</td><td>Ctrl+F9</td><td>Command+F9</td></tr><tr><td>编译并运行</td><td>Shift+F10</td><td>Ctrl+R</td></tr><tr><td>应用更改并重启 Activity</td><td>Ctrl+F10</td><td>Ctrl+Command+R</td></tr><tr><td>应用代码更改</td><td>Ctrl+Alt+F10</td><td>Ctrl+Shift+Command+R</td></tr></tbody></table><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><table><thead><tr><th>说明</th><th>Windows/Linux</th><th>Mac</th></tr></thead><tbody><tr><td>调试</td><td>Shift+F9</td><td>F8</td></tr><tr><td>单步执行</td><td>F8</td><td>F8</td></tr><tr><td>单步进入</td><td>F7</td><td>F7</td></tr><tr><td>智能单步进入</td><td>Shift+F7</td><td>Shift+F7</td></tr><tr><td>单步退出</td><td>Shift+F8</td><td>Shift+F8</td></tr><tr><td>运行到光标位置</td><td>Alt+F9</td><td>Option+F9</td></tr><tr><td>评估表达式</td><td>Alt+F8</td><td>Option+F8</td></tr><tr><td>继续运行程序</td><td>F9</td><td>Command+Option+R</td></tr><tr><td>切换断点</td><td>Ctrl+F8</td><td>Command+F8</td></tr><tr><td>查看断点</td><td>Ctrl+Shift+F8</td><td>Command+Shift+F8</td></tr></tbody></table><h2 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h2><table><thead><tr><th>说明</th><th>Windows/Linux</th><th>Mac</th></tr></thead><tbody><tr><td>复制</td><td>F5</td><td>F5</td></tr><tr><td>移动</td><td>F6</td><td>F6</td></tr><tr><td>安全删除</td><td>Alt+Delete</td><td>Command+Delete</td></tr><tr><td>重命名</td><td>Shift+F6</td><td>Shift+F6</td></tr><tr><td>更改签名</td><td>Ctrl+F6</td><td>Command+F6</td></tr><tr><td>内嵌</td><td>Ctrl+Alt+N</td><td>Command+Option+N</td></tr><tr><td>提取方法</td><td>Ctrl+Alt+M</td><td>Command+Option+M</td></tr><tr><td>提取变量</td><td>Ctrl+Alt+V</td><td>Command+Option+V</td></tr><tr><td>提取字段</td><td>Ctrl+Alt+F</td><td>Command+Option+F</td></tr><tr><td>提取常量</td><td>Ctrl+Alt+C</td><td>Command+Option+C</td></tr><tr><td>提取参数</td><td>Ctrl+Alt+P</td><td>Command+Option+P</td></tr></tbody></table><h2 id="版本控制-本地历史记录"><a href="#版本控制-本地历史记录" class="headerlink" title="版本控制/本地历史记录"></a>版本控制/本地历史记录</h2><table><thead><tr><th>说明</th><th>Windows/Linux</th><th>Mac</th></tr></thead><tbody><tr><td>将项目提交到 VCS</td><td>Ctrl+K</td><td>Command+K</td></tr><tr><td>从 VCS 更新项目</td><td>Ctrl+T</td><td>Command+T</td></tr><tr><td>查看最近变更</td><td>Alt+Shift+C</td><td>Option+Shift+C</td></tr><tr><td>打开 VCS 弹出式菜单</td><td>Alt+`（反引号）</td><td>Ctrl+V</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常规&quot;&gt;&lt;a href=&quot;#常规&quot; class=&quot;headerlink&quot; title=&quot;常规&quot;&gt;&lt;/a&gt;常规&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;Windows/Linux&lt;/th&gt;
&lt;th&gt;Mac&lt;/th&gt;
&lt;/tr
      
    
    </summary>
    
      <category term="AndroidStudio" scheme="http://yoursite.com/categories/AndroidStudio/"/>
    
      <category term="快捷键" scheme="http://yoursite.com/categories/AndroidStudio/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
    
      <category term="AndroidStudio" scheme="http://yoursite.com/tags/AndroidStudio/"/>
    
      <category term="快捷键" scheme="http://yoursite.com/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
</feed>
